{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, PerformanceEvents, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentCacheClient = /** @class */function (_super) {\n  __extends(SilentCacheClient, _super);\n  function SilentCacheClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n  SilentCacheClient.prototype.acquireToken = function (silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, serverTelemetryManager, silentAuthClient, cachedToken, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4 /*yield*/, this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 1:\n            silentAuthClient = _a.sent();\n            this.logger.verbose(\"Silent auth client created\");\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, silentAuthClient.acquireCachedToken(silentRequest)];\n          case 3:\n            cachedToken = _a.sent();\n            acquireTokenMeasurement.endMeasurement({\n              success: true,\n              fromCache: true\n            });\n            return [2 /*return*/, cachedToken];\n          case 4:\n            error_1 = _a.sent();\n            if (error_1 instanceof BrowserAuthError && error_1.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n              this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: error_1 instanceof AuthError && error_1.errorCode || undefined,\n              subErrorCode: error_1 instanceof AuthError && error_1.subError || undefined,\n              success: false\n            });\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentCacheClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates an Silent Flow Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n          case 1:\n            clientConfig = _a.sent();\n            return [2 /*return*/, new SilentFlowClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [__assign({}, request)];\n            return [4 /*yield*/, this.initializeBaseRequest(request, account)];\n          case 1:\n            return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            }])];\n        }\n      });\n    });\n  };\n  return SilentCacheClient;\n}(StandardInteractionClient);\nexport { SilentCacheClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentCacheClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, SilentFlowClient, ServerTelemetryManager, AccountInfo, AzureCloudOptions, PerformanceEvents, AuthError } from \"@azure/msal-common\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentCacheClient extends StandardInteractionClient {\r\n    /**\r\n     * Returns unexpired tokens from the cache, if available\r\n     * @param silentRequest\r\n     */\r\n    async acquireToken(silentRequest: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\r\n        // Telemetry manager only used to increment cacheHits here\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Silent auth client created\");\r\n\r\n        try {\r\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\r\n\r\n            acquireTokenMeasurement.endMeasurement({\r\n                success: true,\r\n                fromCache: true\r\n            });\r\n            return cachedToken;\r\n        } catch (error) {\r\n            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\r\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\r\n            }\r\n            acquireTokenMeasurement.endMeasurement({\r\n                errorCode: error instanceof AuthError && error.errorCode || undefined,\r\n                subErrorCode: error instanceof AuthError && error.subError || undefined,\r\n                success: false\r\n            });\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates an Silent Flow Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createSilentFlowClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<SilentFlowClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new SilentFlowClient(clientConfig, this.performanceClient);\r\n    }\r\n\r\n    async initializeSilentRequest(request: SilentRequest, account: AccountInfo): Promise<CommonSilentFlowRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n        return {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request, account),\r\n            account: account,\r\n            forceRefresh: request.forceRefresh || false\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}