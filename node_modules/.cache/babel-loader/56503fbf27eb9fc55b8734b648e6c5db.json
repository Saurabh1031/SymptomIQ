{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RegionDiscovery = /** @class */function () {\n  function RegionDiscovery(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3 /*break*/, 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 6,, 7]);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n          case 2:\n            localIMDSVersionResponse = _e.sent();\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            return [4 /*yield*/, this.getCurrentVersion(options)];\n          case 3:\n            currentIMDSVersion = _e.sent();\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2 /*return*/, null];\n            }\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\n          case 4:\n            currentIMDSVersionResponse = _e.sent();\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            _e.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            _e.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2 /*return*/, null];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _e.label = 9;\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n            return [2 /*return*/, autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n          case 2:\n            response = _b.sent();\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2 /*return*/, response.body[\"newest-versions\"][0]];\n            }\n            return [2 /*return*/, null];\n          case 3:\n            _b.sent();\n            return [2 /*return*/, null];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Options for the IMDS endpoint request\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\nexport { RegionDiscovery };","map":{"version":3,"sources":["../../src/authority/RegionDiscovery.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\r\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\r\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\r\nimport { ImdsOptions } from \"./ImdsOptions\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\nexport class RegionDiscovery {\r\n    // Network interface to make requests with.\r\n    protected networkInterface: INetworkModule;\r\n    // Performance client\r\n    protected performanceClient: IPerformanceClient | undefined;\r\n    // CorrelationId\r\n    protected correlationId: string | undefined;\r\n    // Options for the IMDS endpoint request\r\n    protected static IMDS_OPTIONS: ImdsOptions = {\r\n        headers: {\r\n            Metadata: \"true\",\r\n        },\r\n    };\r\n\r\n    constructor(networkInterface: INetworkModule, performanceClient?: IPerformanceClient, correlationId?: string) {\r\n        this.networkInterface = networkInterface;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     * \r\n     * @returns Promise<string | null>\r\n     */\r\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata): Promise<string | null> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n        \r\n        // Initialize auto detected region with the region from the envrionment \r\n        let autodetectedRegionName = environmentRegion;\r\n\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \r\n        if (!autodetectedRegionName) {\r\n            const options = RegionDiscovery.IMDS_OPTIONS;\r\n\r\n            try {\r\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                } \r\n                \r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\r\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                    const currentIMDSVersion = await this.getCurrentVersion(options);\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n\r\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\r\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            } catch(e) {\r\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            } \r\n        } else {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n\r\n        return autodetectedRegionName || null;\r\n    }\r\n\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     * \r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    private async getRegionFromIMDS(version: string, options: ImdsOptions): Promise<NetworkResponse<string>> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *  \r\n     * @returns Promise<string | null>\r\n     */\r\n    private async getCurrentVersion(options: ImdsOptions): Promise<string | null> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, options);\r\n\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}