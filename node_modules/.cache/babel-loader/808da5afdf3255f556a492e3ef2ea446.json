{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ServerTelemetryManager = /** @class */function () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (!StringUtils.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n  return ServerTelemetryManager;\n}();\nexport { ServerTelemetryManager };","map":{"version":3,"sources":["../../../src/telemetry/server/ServerTelemetryManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { SERVER_TELEM_CONSTANTS, Separators, CacheOutcome, Constants, RegionDiscoverySources, RegionDiscoveryOutcomes } from \"../../utils/Constants\";\r\nimport { CacheManager } from \"../../cache/CacheManager\";\r\nimport { AuthError } from \"../../error/AuthError\";\r\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\r\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\r\n\r\nexport class ServerTelemetryManager {\r\n    private cacheManager: CacheManager;\r\n    private apiId: number;\r\n    private correlationId: string;\r\n    private telemetryCacheKey: string;\r\n    private wrapperSKU: String;\r\n    private wrapperVer: String;\r\n    private regionUsed: string | undefined;\r\n    private regionSource: RegionDiscoverySources | undefined;\r\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\r\n    private cacheOutcome: CacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n\r\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue(): string {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue(): string {\r\n        const lastRequests = this.getLastRequests();\r\n\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error: AuthError): void {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        \r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        } else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        } else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits(): number {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    }\r\n\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests(): ServerTelemetryEntity {\r\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\r\n\r\n        return lastRequests || initialValue;\r\n    }\r\n\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache(): void {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        } else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return maxErrors;\r\n    }\r\n\r\n    /**\r\n     * Get the region discovery fields\r\n     * \r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields(): string {\r\n        const regionDiscoveryFields: string[] = [];\r\n\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Update the region discovery metadata\r\n     * \r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n\r\n    /**\r\n     * Set cache outcome \r\n     */\r\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}