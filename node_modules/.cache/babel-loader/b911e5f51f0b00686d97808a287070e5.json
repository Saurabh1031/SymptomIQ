{"ast":null,"code":"import{loginRequest}from\"./authConfig\";import{msalInstance}from\"../../index\";import{InteractionRequiredAuthError}from\"@azure/msal-browser\";import{getPatientId}from\"@app/utils\";export async function callMsGraph(){let accessRequest=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";//const history: any = useHistory();\nconst account=msalInstance.getActiveAccount();if(!account){throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");}var request={scopes:[process.env.REACT_APP_AZURE_SCOPES_URL],loginHint:account.name};const response=await msalInstance.acquireTokenSilent({...loginRequest,account:account//forceRefresh: false,\n}).catch(error=>{if(error instanceof InteractionRequiredAuthError){// fallback to interaction when silent call fails\n//console.log(\"regenerating....\")\nreturn msalInstance.acquireTokenRedirect(request);}});const headers=new Headers();const bearer=\"Bearer \".concat(response.accessToken);headers.append(\"Authorization\",bearer);if(response){localStorage.setItem(\"symptoms_analyzer_pwa_access_token\",response.accessToken);if(accessRequest==\"New\"){console.info(\"%cA new token has been generated, Proceeding with member re sign in.\",\"color: #494E9D; background: #494e9d21; font-size: 10px\");let patientId=getPatientId();if(patientId){// memberSignIn({ svassUserId: patientId }).then((response: any) => {\n//   if (response.status == 200) {\n//     window.location.reload()\n//   }\n// });\n}else{//window.location.href = `${process.env.REACT_APP_HOMEPAGE}/homescreen`\n}}}return response;}","map":{"version":3,"names":["loginRequest","msalInstance","InteractionRequiredAuthError","getPatientId","callMsGraph","accessRequest","arguments","length","undefined","account","getActiveAccount","Error","request","scopes","process","env","REACT_APP_AZURE_SCOPES_URL","loginHint","name","response","acquireTokenSilent","catch","error","acquireTokenRedirect","headers","Headers","bearer","concat","accessToken","append","localStorage","setItem","console","info","patientId"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/modules/azure/graphConfig.tsx"],"sourcesContent":["import { loginRequest } from \"./authConfig\";\nimport { msalInstance } from \"../../index\";\nimport { InteractionRequiredAuthError } from \"@azure/msal-browser\";\nimport { getPatientId } from \"@app/utils\";\n\nexport async function callMsGraph(accessRequest = \"\") {\n  //const history: any = useHistory();\n  const account = msalInstance.getActiveAccount();\n  if (!account) {\n    throw Error(\n      \"No active account! Verify a user has been signed in and setActiveAccount has been called.\"\n    );\n  }\n  var request = {\n    scopes: [process.env.REACT_APP_AZURE_SCOPES_URL],\n    loginHint: account.name,\n  };\n\n  const response = await msalInstance\n    .acquireTokenSilent({\n      ...loginRequest,\n      account: account,\n      //forceRefresh: false,\n    })\n    .catch((error) => {\n      if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        //console.log(\"regenerating....\")\n        return msalInstance.acquireTokenRedirect(request);\n      }\n    });\n  const headers = new Headers();\n  const bearer = `Bearer ${response.accessToken}`;\n  headers.append(\"Authorization\", bearer);\n  if (response) {\n    localStorage.setItem(\"symptoms_analyzer_pwa_access_token\", response.accessToken);\n    if (accessRequest == \"New\") {\n      console.info(\n        \"%cA new token has been generated, Proceeding with member re sign in.\",\n        \"color: #494E9D; background: #494e9d21; font-size: 10px\"\n      );\n      let patientId = getPatientId();\n      if (patientId) {\n        // memberSignIn({ svassUserId: patientId }).then((response: any) => {\n        //   if (response.status == 200) {\n        //     window.location.reload()\n        //   }\n        // });\n      } else {\n        //window.location.href = `${process.env.REACT_APP_HOMEPAGE}/homescreen`\n      }\n    }\n  }\n  return response;\n}\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,cAAc,CAC3C,OAASC,YAAY,KAAQ,aAAa,CAC1C,OAASC,4BAA4B,KAAQ,qBAAqB,CAClE,OAASC,YAAY,KAAQ,YAAY,CAEzC,MAAO,eAAe,CAAAC,WAAWA,CAAA,CAAqB,IAApB,CAAAC,aAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAClD;AACA,KAAM,CAAAG,OAAO,CAAGR,YAAY,CAACS,gBAAgB,CAAC,CAAC,CAC/C,GAAI,CAACD,OAAO,CAAE,CACZ,KAAM,CAAAE,KAAK,CACT,2FACF,CAAC,CACH,CACA,GAAI,CAAAC,OAAO,CAAG,CACZC,MAAM,CAAE,CAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC,CAChDC,SAAS,CAAER,OAAO,CAACS,IACrB,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAlB,YAAY,CAChCmB,kBAAkB,CAAC,CAClB,GAAGpB,YAAY,CACfS,OAAO,CAAEA,OACT;AACF,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,EAAK,CAChB,GAAIA,KAAK,WAAY,CAAApB,4BAA4B,CAAE,CACjD;AACA;AACA,MAAO,CAAAD,YAAY,CAACsB,oBAAoB,CAACX,OAAO,CAAC,CACnD,CACF,CAAC,CAAC,CACJ,KAAM,CAAAY,OAAO,CAAG,GAAI,CAAAC,OAAO,CAAC,CAAC,CAC7B,KAAM,CAAAC,MAAM,WAAAC,MAAA,CAAaR,QAAQ,CAACS,WAAW,CAAE,CAC/CJ,OAAO,CAACK,MAAM,CAAC,eAAe,CAAEH,MAAM,CAAC,CACvC,GAAIP,QAAQ,CAAE,CACZW,YAAY,CAACC,OAAO,CAAC,oCAAoC,CAAEZ,QAAQ,CAACS,WAAW,CAAC,CAChF,GAAIvB,aAAa,EAAI,KAAK,CAAE,CAC1B2B,OAAO,CAACC,IAAI,CACV,sEAAsE,CACtE,wDACF,CAAC,CACD,GAAI,CAAAC,SAAS,CAAG/B,YAAY,CAAC,CAAC,CAC9B,GAAI+B,SAAS,CAAE,CACb;AACA;AACA;AACA;AACA;AAAA,CACD,IAAM,CACL;AAAA,CAEJ,CACF,CACA,MAAO,CAAAf,QAAQ,CACjB"},"metadata":{},"sourceType":"module"}