{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { EventType } from './EventType.js';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar EventMessageUtils = /** @class */function () {\n  function EventMessageUtils() {}\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n  EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n        break;\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n      case EventType.RESTORE_FROM_BFCACHE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n          return InteractionStatus.None;\n        }\n        break;\n    }\n    return null;\n  };\n  return EventMessageUtils;\n}();\nexport { EventMessageUtils };","map":{"version":3,"sources":["../../src/event/EventMessage.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;EA4BA,SAAA,iBAAA,CAAA,EAAA,CA2DC;;;;;;EApDU,iBAAA,CAAA,6BAA6B,GAApC,UAAqC,OAAqB,EAAE,aAAiC,EAAA;IACzF,QAAQ,OAAO,CAAC,SAAS;MACrB,KAAK,SAAS,CAAC,WAAW;QACtB,OAAO,iBAAiB,CAAC,KAAK;MAClC,KAAK,SAAS,CAAC,gBAAgB;QAC3B,OAAO,iBAAiB,CAAC,SAAS;MACtC,KAAK,SAAS,CAAC,mBAAmB;QAC9B,IAAI,OAAO,CAAC,eAAe,KAAK,eAAe,CAAC,QAAQ,IAAI,OAAO,CAAC,eAAe,KAAK,eAAe,CAAC,KAAK,EAAE;UAC3G,OAAO,iBAAiB,CAAC,YAAY;QACxC;QACD;MACJ,KAAK,SAAS,CAAC,qBAAqB;QAChC,OAAO,iBAAiB,CAAC,cAAc;MAC3C,KAAK,SAAS,CAAC,YAAY;QACvB,OAAO,iBAAiB,CAAC,MAAM;MACnC,KAAK,SAAS,CAAC,kBAAkB;MACjC,KAAK,SAAS,CAAC,kBAAkB;QAC7B,IAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,SAAS,EAAE;;UAEhE;QACH;QACD,OAAO,iBAAiB,CAAC,IAAI;MACjC,KAAK,SAAS,CAAC,UAAU;QACrB,IAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,MAAM,EAAE;;UAE7D;QACH;QACD,OAAO,iBAAiB,CAAC,IAAI;MACjC,KAAK,SAAS,CAAC,mBAAmB;QAC9B,IAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,cAAc,EAAE;;UAErE;QACH;QACD,OAAO,iBAAiB,CAAC,IAAI;MACjC,KAAK,SAAS,CAAC,aAAa;MAC5B,KAAK,SAAS,CAAC,aAAa;MAC5B,KAAK,SAAS,CAAC,qBAAqB;MACpC,KAAK,SAAS,CAAC,qBAAqB;MACpC,KAAK,SAAS,CAAC,oBAAoB;QAC/B,IAAI,OAAO,CAAC,eAAe,KAAK,eAAe,CAAC,QAAQ,IAAI,OAAO,CAAC,eAAe,KAAK,eAAe,CAAC,KAAK,EAAE;UAC3G,IAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,KAAK,IAAI,aAAa,KAAK,iBAAiB,CAAC,YAAY,EAAE;;YAEhH;UACH;UACD,OAAO,iBAAiB,CAAC,IAAI;QAChC;QACD;IAGP;IACD,OAAO,IAAI;GACd;EACL,OAAA,iBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, AuthError, AccountInfo } from \"@azure/msal-common\";\r\nimport { EventType } from \"./EventType\";\r\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\r\nimport { PopupRequest, RedirectRequest, SilentRequest, SsoSilentRequest, EndSessionRequest } from \"..\";\r\n\r\nexport type EventMessage = {\r\n    eventType: EventType;\r\n    interactionType: InteractionType | null;\r\n    payload: EventPayload;\r\n    error: EventError;\r\n    timestamp: number;\r\n};\r\n\r\nexport type PopupEvent = {\r\n    popupWindow: Window;\r\n};\r\n\r\nexport type EventPayload = AccountInfo | PopupRequest | RedirectRequest | SilentRequest | SsoSilentRequest | EndSessionRequest | AuthenticationResult | PopupEvent | null;\r\n\r\nexport type EventError = AuthError | Error | null;\r\n\r\nexport type EventCallbackFunction = (message: EventMessage) => void;\r\n\r\nexport class EventMessageUtils {\r\n\r\n    /**\r\n     * Gets interaction status from event message\r\n     * @param message\r\n     * @param currentStatus\r\n     */\r\n    static getInteractionStatusFromEvent(message: EventMessage, currentStatus?: InteractionStatus): InteractionStatus|null {\r\n        switch (message.eventType) {\r\n            case EventType.LOGIN_START:\r\n                return InteractionStatus.Login;\r\n            case EventType.SSO_SILENT_START:\r\n                return InteractionStatus.SsoSilent;\r\n            case EventType.ACQUIRE_TOKEN_START:\r\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\r\n                    return InteractionStatus.AcquireToken;\r\n                }\r\n                break;\r\n            case EventType.HANDLE_REDIRECT_START:\r\n                return InteractionStatus.HandleRedirect;\r\n            case EventType.LOGOUT_START:\r\n                return InteractionStatus.Logout;\r\n            case EventType.SSO_SILENT_SUCCESS:\r\n            case EventType.SSO_SILENT_FAILURE:\r\n                if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\r\n                    // Prevent this event from clearing any status other than ssoSilent\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGOUT_END:\r\n                if (currentStatus && currentStatus !== InteractionStatus.Logout) {\r\n                    // Prevent this event from clearing any status other than logout\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.HANDLE_REDIRECT_END:\r\n                if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\r\n                    // Prevent this event from clearing any status other than handleRedirect\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGIN_SUCCESS:\r\n            case EventType.LOGIN_FAILURE:\r\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\r\n            case EventType.ACQUIRE_TOKEN_FAILURE:\r\n            case EventType.RESTORE_FROM_BFCACHE:\r\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\r\n                    if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\r\n                        // Prevent this event from clearing any status other than login or acquireToken\r\n                        break;\r\n                    }\r\n                    return InteractionStatus.None;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}