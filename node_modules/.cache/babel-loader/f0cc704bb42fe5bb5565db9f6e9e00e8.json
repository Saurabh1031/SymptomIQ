{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  };\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  StringUtils.queryStringToObject = function (query) {\n    var obj = {};\n    var params = query.split(\"&\");\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(/\\+/g, \" \"));\n    };\n    params.forEach(function (pair) {\n      if (pair.trim()) {\n        var _a = pair.split(/=(.+)/g, 2),\n          key = _a[0],\n          value = _a[1]; // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n    return regex.test(input);\n  };\n  return StringUtils;\n}();\nexport { StringUtils };","map":{"version":3,"sources":["../../src/utils/StringUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        const matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\r\n        }\r\n        const crackedToken: DecodedAuthToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    }\r\n\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    static isEmpty(str?: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj \r\n     */\r\n    static isEmptyObj(strObj?: string): boolean {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            } catch (e) {}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static startsWith(str: string, search: string): boolean {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n\r\n    static endsWith(str: string, search: string): boolean {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    }\r\n\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject<T>(query: string): T {\r\n        const obj: {} = {};\r\n        const params = query.split(\"&\");\r\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n        params.forEach((pair) => {\r\n            if (pair.trim()) {\r\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj as T;\r\n    }\r\n\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr: Array<string>): Array<string> {\r\n        return arr.map(entry => entry.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\r\n        return arr.filter(entry => {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper<T>(str: string): T | null {\r\n        try {\r\n            return JSON.parse(str) as T;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern: string, input: string): boolean {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        const regex: RegExp = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\r\n\r\n        return regex.test(input);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}