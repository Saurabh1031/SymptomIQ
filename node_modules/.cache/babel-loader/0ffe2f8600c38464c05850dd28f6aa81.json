{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ThrottlingUtils } from './ThrottlingUtils.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar NetworkManager = /** @class */function () {\n  function NetworkManager(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint\r\n   * @param tokenEndpoint\r\n   * @param options\r\n   */\n  NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              throw e_1;\n            } else {\n              throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\n            }\n          case 4:\n            ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  return NetworkManager;\n}();\nexport { NetworkManager };","map":{"version":3,"sources":["../../src/network/NetworkManager.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;AAGG;AA2BH,IAAA,cAAA,GAAA,aAAA,YAAA;EAII,SAAY,cAAA,CAAA,aAA6B,EAAE,YAA0B,EAAA;IACjE,IAAI,CAAC,aAAa,GAAG,aAAa;IAClC,IAAI,CAAC,YAAY,GAAG,YAAY;EACnC;EAED;;;;;AAKG;EACG,cAAA,CAAA,SAAA,CAAA,eAAe,GAArB,UAAyB,UAA6B,EAAE,aAAqB,EAAE,OAA8B,EAAA;;;;;;YACzG,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC;;;;YAI1C,OAAM,CAAA,CAAA,CAAA,WAAA,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAI,aAAa,EAAE,OAAO,CAAC,CAAA;;YAAnF,QAAQ,GAAG,EAAA,CAAA,IAAA,CAAA,CAAwE;;;;YAEnF,IAAI,GAAC,YAAY,SAAS,EAAE;cACxB,MAAM,GAAC;YACV,CAAA,MAAM;cACH,MAAM,eAAe,CAAC,kBAAkB,CAAC,aAAa,EAAE,GAAC,CAAC;YAC7D;;YAGL,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC;YAEpE,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CAAC;;;;EACnB,CAAA;EACL,OAAC,cAAA;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\nexport type NetworkResponse<T> = {\r\n    headers: Record<string, string>;\r\n    body: T;\r\n    status: number;\r\n};\r\n\r\nexport type UrlToHttpRequestOptions = {\r\n    protocol: string;\r\n    hostname: string;\r\n    hash: string;\r\n    search: string;\r\n    pathname: string;\r\n    path: string;\r\n    href: string;\r\n    port?: number;\r\n    auth?: string;\r\n};\r\n\r\nexport class NetworkManager {\r\n    private networkClient: INetworkModule;\r\n    private cacheManager: CacheManager;\r\n\r\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    async sendPostRequest<T>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n\r\n        let response;\r\n        try {\r\n            response = await this.networkClient.sendPostRequestAsync<T>(tokenEndpoint, options);\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            } else {\r\n                throw ClientAuthError.createNetworkError(tokenEndpoint, e);\r\n            }\r\n        }\r\n\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n\r\n        return response;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}