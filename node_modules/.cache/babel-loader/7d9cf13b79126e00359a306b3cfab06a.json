{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Log message level.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\nvar Logger = /** @class */function () {\n  function Logger(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n    var defaultLoggerCallback = function () {\n      return;\n    };\n    var setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n    this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n    this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n    this.correlationId = setLoggerOptions.correlationId || Constants.EMPTY_STRING;\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  Logger.createDefaultLoggerOptions = function () {\n    return {\n      loggerCallback: function () {\n        // allow users to not set loggerCallback\n      },\n      piiLoggingEnabled: false,\n      logLevel: LogLevel.Info\n    };\n  };\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n  Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  };\n  /**\r\n   * Log message with required options.\r\n   */\n  Logger.prototype.logMessage = function (logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n    var timestamp = new Date().toUTCString();\n    // Add correlationId to logs if set, correlationId provided on log messages take precedence\n    var logHeader;\n    if (!StringUtils.isEmpty(options.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\n    } else if (!StringUtils.isEmpty(this.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\n    } else {\n      logHeader = \"[\" + timestamp + \"]\";\n    }\n    var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + LogLevel[options.logLevel] + \" - \" + logMessage;\n    // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  };\n  /**\r\n   * Execute callback with message.\r\n   */\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * Logs error messages.\r\n   */\n  Logger.prototype.error = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs error messages with PII.\r\n   */\n  Logger.prototype.errorPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs warning messages.\r\n   */\n  Logger.prototype.warning = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n  Logger.prototype.warningPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs info messages.\r\n   */\n  Logger.prototype.info = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs info messages with PII.\r\n   */\n  Logger.prototype.infoPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs verbose messages.\r\n   */\n  Logger.prototype.verbose = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n  Logger.prototype.verbosePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs trace messages.\r\n   */\n  Logger.prototype.trace = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n  Logger.prototype.tracePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled || false;\n  };\n  return Logger;\n}();\nexport { LogLevel, Logger };","map":{"version":3,"sources":["../../src/logger/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\r\nimport { Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Options for logger messages.\r\n */\r\nexport type LoggerMessageOptions = {\r\n    logLevel: LogLevel,\r\n    containsPii?: boolean,\r\n    context?: string,\r\n    correlationId?: string\r\n};\r\n\r\n/**\r\n * Log message level.\r\n */\r\nexport enum LogLevel {\r\n    Error,\r\n    Warning,\r\n    Info,\r\n    Verbose,\r\n    Trace\r\n}\r\n\r\n/**\r\n * Callback to send the messages to.\r\n */\r\nexport interface ILoggerCallback {\r\n    (level: LogLevel, message: string, containsPii: boolean): void;\r\n}\r\n\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nexport class Logger {\r\n\r\n    // Correlation ID for request, usually set by user.\r\n    private correlationId: string;\r\n\r\n    // Current log level, defaults to info.\r\n    private level: LogLevel = LogLevel.Info;\r\n\r\n    // Boolean describing whether PII logging is allowed.\r\n    private piiLoggingEnabled: boolean;\r\n\r\n    // Callback to send messages to.\r\n    private localCallback: ILoggerCallback;\r\n\r\n    // Package name implementing this logger\r\n    private packageName: string;\r\n\r\n    // Package version implementing this logger\r\n    private packageVersion: string;\r\n\r\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\r\n        const defaultLoggerCallback = () => {\r\n            return;\r\n        };\r\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\r\n        this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\r\n        this.level = typeof(setLoggerOptions.logLevel) === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\r\n        this.correlationId = setLoggerOptions.correlationId || Constants.EMPTY_STRING;\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n    \r\n    private static createDefaultLoggerOptions(): LoggerOptions {\r\n        return {\r\n            loggerCallback: () => {\r\n                // allow users to not set loggerCallback\r\n            },\r\n            piiLoggingEnabled: false,\r\n            logLevel: LogLevel.Info\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\r\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\r\n    }\r\n\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\r\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        let logHeader: string;\r\n        if (!StringUtils.isEmpty(options.correlationId)) {\r\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\r\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\r\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\r\n        } else {\r\n            logHeader = `[${timestamp}]`;\r\n        }\r\n\r\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    }\r\n\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled(): boolean {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}