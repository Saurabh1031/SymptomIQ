{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { FetchClient } from '../network/FetchClient.js';\nimport { XhrClient } from '../network/XhrClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility class for browser specific functions\r\n */\nvar BrowserUtils = /** @class */function () {\n  function BrowserUtils() {}\n  // #region Window Navigation and URL management\n  /**\r\n   * Clears hash from window url.\r\n   */\n  BrowserUtils.clearHash = function (contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, \"\" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);\n    }\n  };\n  /**\r\n   * Replaces current hash with hash from provided url\r\n   */\n  BrowserUtils.replaceHash = function (url) {\n    var urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Returns boolean of whether the current window is in an iframe or not.\r\n   */\n  BrowserUtils.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\r\n   * Returns boolean of whether or not the current window is a popup opened by msal\r\n   */\n  BrowserUtils.isInPopup = function () {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + \".\") === 0;\n  };\n  // #endregion\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n  BrowserUtils.getCurrentUri = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Gets the homepage url for the current window location.\r\n   */\n  BrowserUtils.getHomepage = function () {\n    var currentUrl = new UrlString(window.location.href);\n    var urlComponents = currentUrl.getUrlComponents();\n    return urlComponents.Protocol + \"//\" + urlComponents.HostNameAndPort + \"/\";\n  };\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n  BrowserUtils.getBrowserNetworkClient = function () {\n    if (window.fetch && window.Headers) {\n      return new FetchClient();\n    } else {\n      return new XhrClient();\n    }\n  };\n  /**\r\n   * Throws error if we have completed an auth and are\r\n   * attempting another auth request inside an iframe.\r\n   */\n  BrowserUtils.blockReloadInHiddenIframes = function () {\n    var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n    }\n  };\n  /**\r\n   * Block redirect operations in iframes unless explicitly allowed\r\n   * @param interactionType Interaction type for the request\r\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n   */\n  BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {\n    var isIframedApp = BrowserUtils.isInIframe();\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n    }\n  };\n  /**\r\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n   */\n  BrowserUtils.blockAcquireTokenInPopups = function () {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n    }\n  };\n  /**\r\n   * Throws error if token requests are made in non-browser environment\r\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n   */\n  BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw BrowserAuthError.createNonBrowserEnvironmentError();\n    }\n  };\n  /**\r\n   * Throws error if native brokering is enabled but initialize hasn't been called\r\n   * @param allowNativeBroker\r\n   * @param initialized\r\n   */\n  BrowserUtils.blockNativeBrokerCalledBeforeInitialized = function (allowNativeBroker, initialized) {\n    if (allowNativeBroker && !initialized) {\n      throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();\n    }\n  };\n  /**\r\n   * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n   */\n  BrowserUtils.detectIEOrEdge = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var msie11 = ua.indexOf(\"Trident/\");\n    var msedge = ua.indexOf(\"Edge/\");\n    var isIE = msie > 0 || msie11 > 0;\n    var isEdge = msedge > 0;\n    return isIE || isEdge;\n  };\n  return BrowserUtils;\n}();\nexport { BrowserUtils };","map":{"version":3,"sources":["../../src/utils/BrowserUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, INetworkModule, UrlString } from \"@azure/msal-common\";\r\nimport { FetchClient } from \"../network/FetchClient\";\r\nimport { XhrClient } from \"../network/XhrClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\r\n\r\n/**\r\n * Utility class for browser specific functions\r\n */\r\nexport class BrowserUtils {\r\n\r\n    // #region Window Navigation and URL management\r\n\r\n    /**\r\n     * Clears hash from window url.\r\n     */\r\n    static clearHash(contentWindow: Window): void {\r\n        // Office.js sets history.replaceState to null\r\n        contentWindow.location.hash = Constants.EMPTY_STRING;\r\n        if (typeof contentWindow.history.replaceState === \"function\") {\r\n            // Full removes \"#\" from url\r\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces current hash with hash from provided url\r\n     */\r\n    static replaceHash(url: string): void {\r\n        const urlParts = url.split(\"#\");\r\n        urlParts.shift(); // Remove part before the hash\r\n        window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether the current window is in an iframe or not.\r\n     */\r\n    static isInIframe(): boolean {\r\n        return window.parent !== window;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether or not the current window is a popup opened by msal\r\n     */\r\n    static isInPopup(): boolean {\r\n        return typeof window !== \"undefined\" && !!window.opener && \r\n            window.opener !== window && \r\n            typeof window.name === \"string\" && \r\n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    static getCurrentUri(): string {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the homepage url for the current window location.\r\n     */\r\n    static getHomepage(): string {\r\n        const currentUrl = new UrlString(window.location.href);\r\n        const urlComponents = currentUrl.getUrlComponents();\r\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\r\n    }\r\n\r\n    /**\r\n     * Returns best compatible network client object. \r\n     */\r\n    static getBrowserNetworkClient(): INetworkModule {\r\n        if (window.fetch && window.Headers) {\r\n            return new FetchClient();\r\n        } else {\r\n            return new XhrClient();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if we have completed an auth and are \r\n     * attempting another auth request inside an iframe.\r\n     */\r\n    static blockReloadInHiddenIframes(): void {\r\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\r\n        // return an error if called from the hidden iframe created by the msal js silent calls\r\n        if (isResponseHash && BrowserUtils.isInIframe()) {\r\n            throw BrowserAuthError.createBlockReloadInHiddenIframeError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirect operations in iframes unless explicitly allowed\r\n     * @param interactionType Interaction type for the request\r\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n     */\r\n    static blockRedirectInIframe(interactionType: InteractionType, allowRedirectInIframe: boolean): void {\r\n        const isIframedApp = BrowserUtils.isInIframe();\r\n        if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\r\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\r\n            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n     */\r\n    static blockAcquireTokenInPopups(): void {\r\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\r\n        if (BrowserUtils.isInPopup()) {\r\n            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if token requests are made in non-browser environment\r\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n     */\r\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\r\n        if (!isBrowserEnvironment) {\r\n            throw BrowserAuthError.createNonBrowserEnvironmentError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if native brokering is enabled but initialize hasn't been called\r\n     * @param allowNativeBroker \r\n     * @param initialized \r\n     */\r\n    static blockNativeBrokerCalledBeforeInitialized(allowNativeBroker: boolean, initialized: boolean): void {\r\n        if (allowNativeBroker && !initialized) {\r\n            throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n     */\r\n    static detectIEOrEdge(): boolean {\r\n        const ua = window.navigator.userAgent;\r\n        const msie = ua.indexOf(\"MSIE \");\r\n        const msie11 = ua.indexOf(\"Trident/\");\r\n        const msedge = ua.indexOf(\"Edge/\");\r\n        const isIE = msie > 0 || msie11 > 0;\r\n        const isEdge = msedge > 0;\r\n        return isIE || isEdge;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}