{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Constants\r\n */\nvar BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nvar NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nvar NativeExtensionMethod;\n(function (NativeExtensionMethod) {\n  NativeExtensionMethod[\"HandshakeRequest\"] = \"Handshake\";\n  NativeExtensionMethod[\"HandshakeResponse\"] = \"HandshakeResponse\";\n  NativeExtensionMethod[\"GetToken\"] = \"GetToken\";\n  NativeExtensionMethod[\"Response\"] = \"Response\";\n})(NativeExtensionMethod || (NativeExtensionMethod = {}));\nvar BrowserCacheLocation;\n(function (BrowserCacheLocation) {\n  BrowserCacheLocation[\"LocalStorage\"] = \"localStorage\";\n  BrowserCacheLocation[\"SessionStorage\"] = \"sessionStorage\";\n  BrowserCacheLocation[\"MemoryStorage\"] = \"memoryStorage\";\n})(BrowserCacheLocation || (BrowserCacheLocation = {}));\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nvar HTTP_REQUEST_TYPE;\n(function (HTTP_REQUEST_TYPE) {\n  HTTP_REQUEST_TYPE[\"GET\"] = \"GET\";\n  HTTP_REQUEST_TYPE[\"POST\"] = \"POST\";\n})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nvar TemporaryCacheKeys;\n(function (TemporaryCacheKeys) {\n  TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\n  TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireToken.account\";\n  TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\n  TemporaryCacheKeys[\"REQUEST_STATE\"] = \"request.state\";\n  TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.id_token\";\n  TemporaryCacheKeys[\"ORIGIN_URI\"] = \"request.origin\";\n  TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\n  TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\n  TemporaryCacheKeys[\"REQUEST_PARAMS\"] = \"request.params\";\n  TemporaryCacheKeys[\"SCOPES\"] = \"scopes\";\n  TemporaryCacheKeys[\"INTERACTION_STATUS_KEY\"] = \"interaction.status\";\n  TemporaryCacheKeys[\"CCS_CREDENTIAL\"] = \"ccs.credential\";\n  TemporaryCacheKeys[\"CORRELATION_ID\"] = \"request.correlationId\";\n  TemporaryCacheKeys[\"NATIVE_REQUEST\"] = \"request.native\";\n  TemporaryCacheKeys[\"REDIRECT_CONTEXT\"] = \"request.redirect.context\";\n})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));\nvar StaticCacheKeys;\n(function (StaticCacheKeys) {\n  StaticCacheKeys[\"ACCOUNT_KEYS\"] = \"msal.account.keys\";\n  StaticCacheKeys[\"TOKEN_KEYS\"] = \"msal.token.keys\";\n})(StaticCacheKeys || (StaticCacheKeys = {}));\n/**\r\n * Cache keys stored in-memory\r\n */\nvar InMemoryCacheKeys;\n(function (InMemoryCacheKeys) {\n  InMemoryCacheKeys[\"WRAPPER_SKU\"] = \"wrapper.sku\";\n  InMemoryCacheKeys[\"WRAPPER_VER\"] = \"wrapper.version\";\n})(InMemoryCacheKeys || (InMemoryCacheKeys = {}));\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nvar ApiId;\n(function (ApiId) {\n  ApiId[ApiId[\"acquireTokenRedirect\"] = 861] = \"acquireTokenRedirect\";\n  ApiId[ApiId[\"acquireTokenPopup\"] = 862] = \"acquireTokenPopup\";\n  ApiId[ApiId[\"ssoSilent\"] = 863] = \"ssoSilent\";\n  ApiId[ApiId[\"acquireTokenSilent_authCode\"] = 864] = \"acquireTokenSilent_authCode\";\n  ApiId[ApiId[\"handleRedirectPromise\"] = 865] = \"handleRedirectPromise\";\n  ApiId[ApiId[\"acquireTokenByCode\"] = 866] = \"acquireTokenByCode\";\n  ApiId[ApiId[\"acquireTokenSilent_silentFlow\"] = 61] = \"acquireTokenSilent_silentFlow\";\n  ApiId[ApiId[\"logout\"] = 961] = \"logout\";\n  ApiId[ApiId[\"logoutPopup\"] = 962] = \"logoutPopup\";\n})(ApiId || (ApiId = {}));\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nvar InteractionStatus;\n(function (InteractionStatus) {\n  /**\r\n   * Initial status before interaction occurs\r\n   */\n  InteractionStatus[\"Startup\"] = \"startup\";\n  /**\r\n   * Status set when all login calls occuring\r\n   */\n  InteractionStatus[\"Login\"] = \"login\";\n  /**\r\n   * Status set when logout call occuring\r\n   */\n  InteractionStatus[\"Logout\"] = \"logout\";\n  /**\r\n   * Status set for acquireToken calls\r\n   */\n  InteractionStatus[\"AcquireToken\"] = \"acquireToken\";\n  /**\r\n   * Status set for ssoSilent calls\r\n   */\n  InteractionStatus[\"SsoSilent\"] = \"ssoSilent\";\n  /**\r\n   * Status set when handleRedirect in progress\r\n   */\n  InteractionStatus[\"HandleRedirect\"] = \"handleRedirect\";\n  /**\r\n   * Status set when interaction is complete\r\n   */\n  InteractionStatus[\"None\"] = \"none\";\n})(InteractionStatus || (InteractionStatus = {}));\nvar DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\nvar KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nvar WrapperSKU;\n(function (WrapperSKU) {\n  WrapperSKU[\"React\"] = \"@azure/msal-react\";\n  WrapperSKU[\"Angular\"] = \"@azure/msal-angular\";\n})(WrapperSKU || (WrapperSKU = {}));\n// DatabaseStorage Constants\nvar DB_NAME = \"msal.db\";\nvar DB_VERSION = 1;\nvar DB_TABLE_NAME = DB_NAME + \".keys\";\nvar CacheLookupPolicy;\n(function (CacheLookupPolicy) {\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"Default\"] = 0] = \"Default\";\n  /*\r\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n   * refresh tokens.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"AccessToken\"] = 1] = \"AccessToken\";\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n   * will not be renewed and acquireTokenSilent will fail.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"AccessTokenAndRefreshToken\"] = 2] = \"AccessTokenAndRefreshToken\";\n  /*\r\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n   * renewed and acquireTokenSilent will fail.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"RefreshToken\"] = 3] = \"RefreshToken\";\n  /*\r\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n   * setting \"forceRefresh: true\".\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"RefreshTokenAndNetwork\"] = 4] = \"RefreshTokenAndNetwork\";\n  /*\r\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n   * always fail if 3rd party cookies are blocked by the browser.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"Skip\"] = 5] = \"Skip\";\n})(CacheLookupPolicy || (CacheLookupPolicy = {}));\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };","map":{"version":3,"sources":["../../src/utils/BrowserConstants.ts"],"names":[],"mappings":";;;;;AAAA;;;;AASA;;;IAGa,gBAAgB,GAAG;;;;EAI5B,6BAA6B,EAAE,yBAAyB;;;;EAIxD,mBAAmB,EAAE,eAAe;;;;EAIpC,WAAW,EAAE,GAAG;;;;EAIhB,YAAY,EAAE,GAAG;;;;EAIjB,iBAAiB,EAAE,MAAM;;;;EAIzB,wBAAwB,EAAE,EAAE;;;;EAI5B,QAAQ,EAAE;CACZ;IAEW,eAAe,GAAG;EAC3B,UAAU,EAAE,sCAAsC;EAClD,sBAAsB,EAAE,kCAAkC;EAC1D,cAAc,EAAE;CAClB;IAEU,qBAAA;AAAZ,CAAA,UAAY,qBAAqB,EAAA;EAC7B,qBAAA,CAAA,kBAAA,CAAA,GAAA,WAA8B;EAC9B,qBAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC;EACvC,qBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;EACrB,qBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;AACzB,CAAC,EALW,qBAAqB,KAArB,qBAAqB,GAAA,CAAA,CAAA,CAAA,CAAA;IAOrB,oBAAA;AAAZ,CAAA,UAAY,oBAAoB,EAAA;EAC5B,oBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;EAC7B,oBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,oBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B;AACnC,CAAC,EAJW,oBAAoB,KAApB,oBAAoB,GAAA,CAAA,CAAA,CAAA,CAAA;AAMhC;;;IAGY,iBAAA;AAAZ,CAAA,UAAY,iBAAiB,EAAA;EACzB,iBAAA,CAAA,KAAA,CAAA,GAAA,KAAW;EACX,iBAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACjB,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;AAK7B;;;IAGY,kBAAA;AAAZ,CAAA,UAAY,kBAAkB,EAAA;EAC1B,kBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;EACvB,kBAAA,CAAA,uBAAA,CAAA,GAAA,sBAA8C;EAC9C,kBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B;EAC/B,kBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B;EAC/B,kBAAA,CAAA,eAAA,CAAA,GAAA,gBAAgC;EAChC,kBAAA,CAAA,YAAA,CAAA,GAAA,gBAA6B;EAC7B,kBAAA,CAAA,cAAA,CAAA,GAAA,oBAAmC;EACnC,kBAAA,CAAA,UAAA,CAAA,GAAA,SAAoB;EACpB,kBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,kBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,kBAAA,CAAA,wBAAA,CAAA,GAAA,oBAA6C;EAC7C,kBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,kBAAA,CAAA,gBAAA,CAAA,GAAA,uBAAwC;EACxC,kBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,kBAAA,CAAA,kBAAA,CAAA,GAAA,0BAA6C;AACjD,CAAC,EAhBW,kBAAkB,KAAlB,kBAAkB,GAAA,CAAA,CAAA,CAAA,CAAA;IAkBlB,eAAA;AAAZ,CAAA,UAAY,eAAe,EAAA;EACvB,eAAA,CAAA,cAAA,CAAA,GAAA,mBAAkC;EAClC,eAAA,CAAA,YAAA,CAAA,GAAA,iBAA8B;AAClC,CAAC,EAHW,eAAe,KAAf,eAAe,GAAA,CAAA,CAAA,CAAA,CAAA;AAK3B;;;IAGY,iBAAA;AAAZ,CAAA,UAAY,iBAAiB,EAAA;EACzB,iBAAA,CAAA,aAAA,CAAA,GAAA,aAA2B;EAC3B,iBAAA,CAAA,aAAA,CAAA,GAAA,iBAA+B;AACnC,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;AAK7B;;;;;;IAMY,KAAA;AAAZ,CAAA,UAAY,KAAK,EAAA;EACb,KAAA,CAAA,KAAA,CAAA,sBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,sBAA0B;EAC1B,KAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,mBAAuB;EACvB,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,GAAA,CAAA,GAAA,WAAe;EACf,KAAA,CAAA,KAAA,CAAA,6BAAA,CAAA,GAAA,GAAA,CAAA,GAAA,6BAAiC;EACjC,KAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,uBAA2B;EAC3B,KAAA,CAAA,KAAA,CAAA,oBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,oBAAwB;EACxB,KAAA,CAAA,KAAA,CAAA,+BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,+BAAkC;EAClC,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAY;EACZ,KAAA,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,GAAA,CAAA,GAAA,aAAiB;AACrB,CAAC,EAVW,KAAK,KAAL,KAAK,GAAA,CAAA,CAAA,CAAA,CAAA;AAYjB;;;IAGY,eAAA;AAAZ,CAAA,UAAY,eAAe,EAAA;EACvB,eAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;EACrB,eAAA,CAAA,OAAA,CAAA,GAAA,OAAe;EACf,eAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,eAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACjB,CAAC,EALW,eAAe,KAAf,eAAe,GAAA,CAAA,CAAA,CAAA,CAAA;AAO3B;;;;IAIY,iBAAA;AAAZ,CAAA,UAAY,iBAAiB,EAAA;;;;EAIzB,iBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB;;;;EAInB,iBAAA,CAAA,OAAA,CAAA,GAAA,OAAe;;;;EAIf,iBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;;;;EAIjB,iBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;;;;EAI7B,iBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;;;;EAIvB,iBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;;;;EAIjC,iBAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACjB,CAAC,EA7BW,iBAAiB,KAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;IA+BhB,eAAe,GAAiC;EACzD,MAAM,EAAE;CACV;AAEF;;;IAGa,cAAc,GAAG,KAAA;AAE9B;IACY,UAAA;AAAZ,CAAA,UAAY,UAAU,EAAA;EAClB,UAAA,CAAA,OAAA,CAAA,GAAA,mBAA2B;EAC3B,UAAA,CAAA,SAAA,CAAA,GAAA,qBAA+B;AACnC,CAAC,EAHW,UAAU,KAAV,UAAU,GAAA,CAAA,CAAA,CAAA,CAAA;AAKtB;IACa,OAAO,GAAG,SAAA;IACV,UAAU,GAAG,CAAA;IACb,aAAa,GAAM,OAAO,GAAA,OAAA;IAE3B,iBAAA;AAAZ,CAAA,UAAY,iBAAiB,EAAA;;;;;;EAMzB,iBAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW;;;;;EAKX,iBAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAe;;;;;;EAMf,iBAAA,CAAA,iBAAA,CAAA,4BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,4BAA8B;;;;;;EAM9B,iBAAA,CAAA,iBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAgB;;;;;;EAMhB,iBAAA,CAAA,iBAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAA0B;;;;;EAK1B,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAQ;AACZ,CAAC,EAnCW,iBAAiB,KAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const BrowserConstants = {\r\n    /**\r\n     * Interaction in progress cache value\r\n     */\r\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\r\n    /**\r\n     * Invalid grant error code\r\n     */\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    /**\r\n     * Default popup window width\r\n     */\r\n    POPUP_WIDTH: 483,\r\n    /**\r\n     * Default popup window height\r\n     */\r\n    POPUP_HEIGHT: 600,\r\n    /**\r\n     * Name of the popup window starts with\r\n     */\r\n    POPUP_NAME_PREFIX: \"msal\",\r\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */\r\n    DEFAULT_POLL_INTERVAL_MS: 30,\r\n    /**\r\n     * Msal-browser SKU\r\n     */\r\n    MSAL_SKU: \"msal.js.browser\",\r\n};\r\n\r\nexport const NativeConstants = {\r\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\r\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\r\n    MATS_TELEMETRY: \"MATS\"\r\n};\r\n\r\nexport enum NativeExtensionMethod {\r\n    HandshakeRequest = \"Handshake\",\r\n    HandshakeResponse = \"HandshakeResponse\",\r\n    GetToken = \"GetToken\",\r\n    Response = \"Response\"\r\n}\r\n\r\nexport enum BrowserCacheLocation {\r\n    LocalStorage = \"localStorage\",\r\n    SessionStorage = \"sessionStorage\",\r\n    MemoryStorage = \"memoryStorage\"\r\n}\r\n\r\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\r\nexport enum HTTP_REQUEST_TYPE {\r\n    GET = \"GET\",\r\n    POST = \"POST\"\r\n}\r\n\r\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\r\nexport enum TemporaryCacheKeys {\r\n    AUTHORITY = \"authority\",\r\n    ACQUIRE_TOKEN_ACCOUNT = \"acquireToken.account\",\r\n    SESSION_STATE = \"session.state\",\r\n    REQUEST_STATE = \"request.state\",\r\n    NONCE_IDTOKEN = \"nonce.id_token\",\r\n    ORIGIN_URI = \"request.origin\",\r\n    RENEW_STATUS = \"token.renew.status\",\r\n    URL_HASH = \"urlHash\",\r\n    REQUEST_PARAMS = \"request.params\",\r\n    SCOPES = \"scopes\",\r\n    INTERACTION_STATUS_KEY = \"interaction.status\",\r\n    CCS_CREDENTIAL = \"ccs.credential\",\r\n    CORRELATION_ID = \"request.correlationId\",\r\n    NATIVE_REQUEST = \"request.native\",\r\n    REDIRECT_CONTEXT = \"request.redirect.context\"\r\n}\r\n\r\nexport enum StaticCacheKeys {\r\n    ACCOUNT_KEYS = \"msal.account.keys\",\r\n    TOKEN_KEYS = \"msal.token.keys\"\r\n}\r\n\r\n/**\r\n * Cache keys stored in-memory\r\n */\r\nexport enum InMemoryCacheKeys {\r\n    WRAPPER_SKU = \"wrapper.sku\",\r\n    WRAPPER_VER = \"wrapper.version\"\r\n}\r\n\r\n/**\r\n * API Codes for Telemetry purposes. \r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nexport enum ApiId {\r\n    acquireTokenRedirect = 861,\r\n    acquireTokenPopup = 862,\r\n    ssoSilent = 863,\r\n    acquireTokenSilent_authCode = 864,\r\n    handleRedirectPromise = 865,\r\n    acquireTokenByCode = 866,\r\n    acquireTokenSilent_silentFlow = 61,\r\n    logout = 961,\r\n    logoutPopup = 962\r\n}\r\n\r\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\r\nexport enum InteractionType {\r\n    Redirect = \"redirect\",\r\n    Popup = \"popup\",\r\n    Silent = \"silent\",\r\n    None = \"none\"\r\n}\r\n\r\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\r\nexport enum InteractionStatus {\r\n    /**\r\n     * Initial status before interaction occurs\r\n     */\r\n    Startup = \"startup\",\r\n    /**\r\n     * Status set when all login calls occuring\r\n     */\r\n    Login = \"login\",\r\n    /**\r\n     * Status set when logout call occuring\r\n     */ \r\n    Logout = \"logout\",\r\n    /**\r\n     * Status set for acquireToken calls\r\n     */\r\n    AcquireToken = \"acquireToken\",\r\n    /**\r\n     * Status set for ssoSilent calls\r\n     */\r\n    SsoSilent = \"ssoSilent\",\r\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */\r\n    HandleRedirect = \"handleRedirect\",\r\n    /**\r\n     * Status set when interaction is complete\r\n     */\r\n    None = \"none\"\r\n}\r\n\r\nexport const DEFAULT_REQUEST: RedirectRequest|PopupRequest = {\r\n    scopes: OIDC_DEFAULT_SCOPES\r\n};\r\n\r\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\r\nexport const KEY_FORMAT_JWK = \"jwk\";\r\n\r\n// Supported wrapper SKUs\r\nexport enum WrapperSKU {\r\n    React = \"@azure/msal-react\",\r\n    Angular = \"@azure/msal-angular\"\r\n}\r\n\r\n// DatabaseStorage Constants\r\nexport const DB_NAME = \"msal.db\";\r\nexport const DB_VERSION = 1;\r\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\r\n\r\nexport enum CacheLookupPolicy {\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */\r\n    Default = 0, // 0 is falsy, is equivalent to not passing in a CacheLookupPolicy\r\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */\r\n    AccessToken = 1,\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */\r\n    AccessTokenAndRefreshToken = 2,\r\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */\r\n    RefreshToken = 3,\r\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */\r\n    RefreshTokenAndNetwork = 4,\r\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */\r\n    Skip = 5,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}