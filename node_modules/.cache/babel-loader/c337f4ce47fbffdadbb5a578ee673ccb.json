{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __spread, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar MsrBrowserCrypto = /** @class */function () {\n  function MsrBrowserCrypto() {}\n  MsrBrowserCrypto.prototype.initPrng = function (entropy) {\n    // Turn into array, as initPrng seems to not always like Uint8Array (even though it should support both)\n    return window.msrCrypto.initPrng(__spread(entropy));\n  };\n  MsrBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return window.msrCrypto.getRandomValues(dataBuffer);\n  };\n  MsrBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.generateKey(algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.exportKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.sign = function (algorithm, key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.sign(algorithm, key, data)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.digest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n  return MsrBrowserCrypto;\n}();\nexport { MsrBrowserCrypto };","map":{"version":3,"sources":["../../src/crypto/MsrBrowserCrypto.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;EAgBA,SAAA,gBAAA,CAAA,EAAA,CA6BC;EA5BG,gBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,OAAoB,EAAA;;IAEzB,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAA,QAAA,CAAK,OAAO,CAAA,CAAE;GACjD;EAED,gBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,UAAsB,EAAA;IAClC,OAAO,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC;GACtD;EAEK,gBAAA,CAAA,SAAA,CAAA,WAAW,GAAjB,UAAkB,SAAgC,EAAE,WAAoB,EAAE,SAAqB,EAAA;;;QAC3F,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAA2B,CAAA;;;GAC1G;EAEK,gBAAA,CAAA,SAAA,CAAA,SAAS,GAAf,UAAgB,GAAc,EAAA;;;QAC1B,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,GAAG,CAA+C,CAAA;;;GAC9G;EAEK,gBAAA,CAAA,SAAA,CAAA,SAAS,GAAf,UAAgB,OAAmB,EAAE,SAAgC,EAAE,WAAoB,EAAE,SAAqB,EAAA;;;QAC9G,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAuB,CAAA;;;GAC7H;EAEK,gBAAA,CAAA,SAAA,CAAA,IAAI,GAAV,UAAW,SAA8B,EAAE,GAAc,EAAE,IAAiB,EAAA;;;QACxE,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAyB,CAAA;;;GACpF;EAEK,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAZ,UAAa,SAA8B,EAAE,IAAgB,EAAA;;;QACzD,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAyB,CAAA;;;GACjF;EACL,OAAA,gBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\r\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        msrCrypto: Crypto & {\r\n            initPrng: (entropy: Uint8Array | number[]) => void\r\n        }\r\n    }\r\n}\r\n\r\nexport class MsrBrowserCrypto implements ISubtleCrypto {\r\n    initPrng(entropy : Uint8Array): void {\r\n        // Turn into array, as initPrng seems to not always like Uint8Array (even though it should support both)\r\n        return window.msrCrypto.initPrng([...entropy]);\r\n    }\r\n\r\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\r\n        return window.msrCrypto.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    async generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair> {\r\n        return window.msrCrypto.subtle.generateKey(algorithm, extractable, keyUsages) as Promise<CryptoKeyPair>;\r\n    }\r\n\r\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\r\n        return window.msrCrypto.subtle.exportKey(KEY_FORMAT_JWK, key) as Promise<JsonWebKey> as Promise<JsonWebKey>;\r\n    }\r\n\r\n    async importKey(keyData: JsonWebKey, algorithm: RsaHashedImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\r\n        return window.msrCrypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages) as Promise<CryptoKey>;\r\n    }\r\n\r\n    async sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\r\n        return window.msrCrypto.subtle.sign(algorithm, key, data) as Promise<ArrayBuffer>;\r\n    }\r\n\r\n    async digest(algorithm: AlgorithmIdentifier, data: Uint8Array): Promise<ArrayBuffer> {\r\n        return window.msrCrypto.subtle.digest(algorithm, data) as Promise<ArrayBuffer>; \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}