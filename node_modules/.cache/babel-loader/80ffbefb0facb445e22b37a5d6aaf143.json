{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserPerformanceMeasurement = /** @class */function () {\n  function BrowserPerformanceMeasurement(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n  BrowserPerformanceMeasurement.makeMeasureName = function (name, correlationId) {\n    return \"msal.measure.\" + name + \".\" + correlationId;\n  };\n  BrowserPerformanceMeasurement.makeStartMark = function (name, correlationId) {\n    return \"msal.start.\" + name + \".\" + correlationId;\n  };\n  BrowserPerformanceMeasurement.makeEndMark = function (name, correlationId) {\n    return \"msal.end.\" + name + \".\" + correlationId;\n  };\n  BrowserPerformanceMeasurement.supportsBrowserPerformance = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  };\n  /**\r\n   * Flush browser marks and measurements.\r\n   * @param {string} correlationId\r\n   * @param {SubMeasurement} measurements\r\n   */\n  BrowserPerformanceMeasurement.flushMeasurements = function (correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(function (measurement) {\n          var measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          var entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n  };\n  BrowserPerformanceMeasurement.prototype.startMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  };\n  BrowserPerformanceMeasurement.prototype.endMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  };\n  BrowserPerformanceMeasurement.prototype.flushMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        var entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n        if (entriesForMeasurement.length > 0) {\n          var durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n    return null;\n  };\n  return BrowserPerformanceMeasurement;\n}();\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"sources":["../../src/telemetry/BrowserPerformanceMeasurement.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPerformanceMeasurement, SubMeasurement } from \"@azure/msal-common\";\r\n\r\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\r\n    private readonly measureName: string;\r\n    private readonly correlationId: string;\r\n    private readonly startMark: string;\r\n    private readonly endMark: string;\r\n\r\n    constructor(name: string, correlationId: string) {\r\n        this.correlationId = correlationId;\r\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\r\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\r\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\r\n    }\r\n\r\n    private static makeMeasureName(name: string, correlationId: string) {\r\n        return `msal.measure.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeStartMark(name: string, correlationId: string) {\r\n        return `msal.start.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeEndMark(name: string, correlationId: string) {\r\n        return `msal.end.${name}.${correlationId}`;\r\n    }\r\n\r\n    static supportsBrowserPerformance(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.mark === \"function\" &&\r\n            typeof window.performance.measure === \"function\" &&\r\n            typeof window.performance.clearMarks === \"function\" &&\r\n            typeof window.performance.clearMeasures === \"function\" &&\r\n            typeof window.performance.getEntriesByName === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Flush browser marks and measurements.\r\n     * @param {string} correlationId\r\n     * @param {SubMeasurement} measurements\r\n     */\r\n    public static flushMeasurements(correlationId: string, measurements: SubMeasurement[]): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                measurements.forEach((measurement) => {\r\n                    const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\r\n                    const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\r\n                    if (entriesForMeasurement.length > 0) {\r\n                        window.performance.clearMeasures(measureName);\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n    }\r\n\r\n    startMeasurement(): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.startMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    endMeasurement():void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.endMark);\r\n                window.performance.measure(this.measureName, this.startMark, this.endMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    flushMeasurement(): number | null {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\r\n                if (entriesForMeasurement.length > 0) {\r\n                    const durationMs = entriesForMeasurement[0].duration;\r\n                    window.performance.clearMeasures(this.measureName);\r\n                    window.performance.clearMarks(this.startMark);\r\n                    window.performance.clearMarks(this.endMark);\r\n                    return durationMs;\r\n                }\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}