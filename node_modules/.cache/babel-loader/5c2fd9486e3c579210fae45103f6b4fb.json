{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserProtocolUtils = /** @class */function () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n  return BrowserProtocolUtils;\n}();\nexport { BrowserProtocolUtils };","map":{"version":3,"sources":["../../src/utils/BrowserProtocolUtils.ts"],"names":[],"mappings":";;;;;AAAA;;;;;EAYA,SAAA,oBAAA,CAAA,EAAA,CAgCC;;;;;;EAzBU,oBAAA,CAAA,0BAA0B,GAAjC,UAAkC,aAAsB,EAAE,KAAa,EAAA;IACnE,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;IACd;IAED,IAAI;MACA,IAAM,eAAe,GAAuB,aAAa,CAAC,iBAAiB,CAAC,aAAa,EAAE,KAAK,CAAC;MACjG,OAAO,eAAe,CAAC,YAAY,CAAC,IAA0B;KACjE,CAAC,OAAO,CAAC,EAAE;MACR,MAAM,eAAe,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1D;GACJ;;;;;EAMM,oBAAA,CAAA,2BAA2B,GAAlC,UAAmC,YAAoB,EAAA;IACnD,IAAI,CAAC,YAAY,EAAE;MACf,OAAO,CAAA,CAAE;IACZ;IAED,IAAM,aAAa,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC;IACjD,OAAO,SAAS,CAAC,mBAAmB,CAAC,aAAa,CAAC,OAAO,CAAA,CAAE,CAAC;GAChE;EACL,OAAA,oBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InteractionType } from \"./BrowserConstants\";\r\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\r\n\r\nexport type BrowserStateObject = {\r\n    interactionType: InteractionType\r\n};\r\n\r\nexport class BrowserProtocolUtils {\r\n\r\n    /**\r\n     * Extracts the BrowserStateObject from the state string.\r\n     * @param browserCrypto \r\n     * @param state \r\n     */\r\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\r\n        if (StringUtils.isEmpty(state)) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\r\n            return requestStateObj.libraryState.meta as BrowserStateObject;\r\n        } catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses properties of server response from url hash\r\n     * @param locationHash Hash from url\r\n     */\r\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\r\n        if (!locationHash) {\r\n            return {};\r\n        }\r\n        \r\n        const hashUrlString = new UrlString(locationHash);\r\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}