{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { DatabaseStorage } from './DatabaseStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\nvar AsyncMemoryStorage = /** @class */function () {\n  function AsyncMemoryStorage(logger, storeName) {\n    this.inMemoryCache = new MemoryStorage();\n    this.indexedDBCache = new DatabaseStorage();\n    this.logger = logger;\n    this.storeName = storeName;\n  }\n  AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {\n    if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n      this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n    } else {\n      throw error;\n    }\n  };\n  /**\r\n   * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n   * storage object if item isn't found in-memory.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var item, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            item = this.inMemoryCache.getItem(key);\n            if (!!item) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getItem(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_1 = _a.sent();\n            this.handleDatabaseAccessError(e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, item];\n        }\n      });\n    });\n  };\n  /**\r\n   * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n   * storage object with the given key.\r\n   * @param key\r\n   * @param value\r\n   */\n  AsyncMemoryStorage.prototype.setItem = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.setItem(key, value);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            this.handleDatabaseAccessError(e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.removeItem(key);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.removeItem(key)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_3 = _a.sent();\n            this.handleDatabaseAccessError(e_3);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n   * asynchronous storage object.\r\n   */\n  AsyncMemoryStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cacheKeys, e_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cacheKeys = this.inMemoryCache.getKeys();\n            if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getKeys()];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_4 = _a.sent();\n            this.handleDatabaseAccessError(e_4);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, cacheKeys];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns true or false if the given key is present in the cache.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var containsKey, e_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            containsKey = this.inMemoryCache.containsKey(key);\n            if (!!containsKey) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.containsKey(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_5 = _a.sent();\n            this.handleDatabaseAccessError(e_5);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, containsKey];\n        }\n      });\n    });\n  };\n  /**\r\n   * Clears in-memory Map\r\n   */\n  AsyncMemoryStorage.prototype.clearInMemory = function () {\n    // InMemory cache is a Map instance, clear is straightforward\n    this.logger.verbose(\"Deleting in-memory keystore \" + this.storeName);\n    this.inMemoryCache.clear();\n    this.logger.verbose(\"In-memory keystore \" + this.storeName + \" deleted\");\n  };\n  /**\r\n   * Tries to delete the IndexedDB database\r\n   * @returns\r\n   */\n  AsyncMemoryStorage.prototype.clearPersistent = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dbDeleted, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            this.logger.verbose(\"Deleting persistent keystore\");\n            return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];\n          case 1:\n            dbDeleted = _a.sent();\n            if (dbDeleted) {\n              this.logger.verbose(\"Persistent keystore deleted\");\n            }\n            return [2 /*return*/, dbDeleted];\n          case 2:\n            e_6 = _a.sent();\n            this.handleDatabaseAccessError(e_6);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return AsyncMemoryStorage;\n}();\nexport { AsyncMemoryStorage };","map":{"version":3,"sources":["../../src/cache/AsyncMemoryStorage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { DatabaseStorage } from \"./DatabaseStorage\";\r\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\r\nimport { MemoryStorage } from \"./MemoryStorage\";\r\n\r\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\r\nexport class AsyncMemoryStorage<T> implements IAsyncStorage<T> {\r\n    private inMemoryCache: MemoryStorage<T>;\r\n    private indexedDBCache: DatabaseStorage<T>;\r\n    private logger: Logger;\r\n    private storeName: string;\r\n\r\n    constructor(logger: Logger, storeName: string) {\r\n        this.inMemoryCache = new MemoryStorage<T>();\r\n        this.indexedDBCache = new DatabaseStorage<T>();\r\n        this.logger = logger;\r\n        this.storeName = storeName;\r\n    }\r\n\r\n    private handleDatabaseAccessError(error: unknown): void {\r\n        if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\r\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n     * storage object if item isn't found in-memory.\r\n     * @param key \r\n     */\r\n    async getItem(key: string): Promise<T | null> {\r\n        const item = this.inMemoryCache.getItem(key);\r\n        if(!item) {\r\n            try {\r\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\r\n                return await this.indexedDBCache.getItem(key);\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n     * storage object with the given key.\r\n     * @param key \r\n     * @param value \r\n     */\r\n    async setItem(key: string, value: T): Promise<void> {\r\n        this.inMemoryCache.setItem(key, value);\r\n        try {\r\n            await this.indexedDBCache.setItem(key, value);\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n     * @param key \r\n     */\r\n    async removeItem(key: string): Promise<void> {\r\n        this.inMemoryCache.removeItem(key);\r\n        try {\r\n            await this.indexedDBCache.removeItem(key);\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the \r\n     * asynchronous storage object.\r\n     */\r\n    async getKeys(): Promise<string[]> {\r\n        const cacheKeys = this.inMemoryCache.getKeys();\r\n        if (cacheKeys.length === 0) {\r\n            try {\r\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\r\n                return await this.indexedDBCache.getKeys();\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return cacheKeys;\r\n    }\r\n\r\n    /**\r\n     * Returns true or false if the given key is present in the cache.\r\n     * @param key \r\n     */\r\n    async containsKey(key: string): Promise<boolean> {\r\n        const containsKey = this.inMemoryCache.containsKey(key);\r\n        if(!containsKey) {\r\n            try {\r\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\r\n                return await this.indexedDBCache.containsKey(key);\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return containsKey;\r\n    }\r\n\r\n    /**\r\n     * Clears in-memory Map\r\n     */\r\n    clearInMemory(): void {\r\n        // InMemory cache is a Map instance, clear is straightforward\r\n        this.logger.verbose(`Deleting in-memory keystore ${this.storeName}`);\r\n        this.inMemoryCache.clear();\r\n        this.logger.verbose(`In-memory keystore ${this.storeName} deleted`);\r\n    }\r\n\r\n    /**\r\n     * Tries to delete the IndexedDB database\r\n     * @returns\r\n     */\r\n    async clearPersistent(): Promise<boolean> {\r\n        try {\r\n            this.logger.verbose(\"Deleting persistent keystore\");\r\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\r\n            if (dbDeleted) {\r\n                this.logger.verbose(\"Persistent keystore deleted\");\r\n            }\r\n            \r\n            return dbDeleted;\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}