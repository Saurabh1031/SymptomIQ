{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport { __RouterContext as RouterContext } from \"react-router\";\nexport function useLocation() {\n  _s();\n  const {\n    location,\n    history\n  } = useContext(RouterContext);\n  function navigate(to, {\n    replace = false\n  } = {}) {\n    if (replace) {\n      history.replace(to);\n    } else {\n      history.push(to);\n    } //@ts-nocheck\n  }\n  return {\n    location,\n    navigate\n  };\n}\n_s(useLocation, \"gEy23NHUS9zWSLnVqtp53S3laBM=\");\nexport function checkLocation(setShowPopUp) {\n  if (!navigator.geolocation) {\n    //console.log(\"Geolocation API not supported by this browser.\");\n  } else {\n    navigator.geolocation.getCurrentPosition(success => {}, error => {\n      setShowPopUp(true);\n    });\n  }\n}\nexport function getGeoLocationAccess() {\n  //if ( permission === 'granted' || permission === 'prompt' || permission === 'denied' )\n  let location = navigator.permissions;\n  if (location && location.query) {\n    return navigator.permissions.query({\n      name: \"geolocation\"\n    }).then(result => {\n      return result;\n    });\n  } else {\n    return {\n      state: \"No-GEO-Support\"\n    };\n  }\n}\nexport async function checkGEOLocationAccess() {\n  if (sessionStorage.getItem(\"GEOAccess\") && sessionStorage.getItem(\"isBridgeAccess\")) {\n    return {\n      geoAccess: true,\n      data: true\n    };\n  } else {\n    try {\n      let position = await getGeoLocationPromise();\n      sessionStorage.setItem(\"GEOAccess\", \"true\");\n      return {\n        geoAccess: true,\n        data: position\n      };\n    } catch (err) {\n      return {\n        geoAccess: 0,\n        data: err\n      };\n    }\n  }\n}\nexport function getGeoLocationPromise() {\n  return new Promise((resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject));\n}","map":{"version":3,"names":["useContext","__RouterContext","RouterContext","useLocation","_s","location","history","navigate","to","replace","push","checkLocation","setShowPopUp","navigator","geolocation","getCurrentPosition","success","error","getGeoLocationAccess","permissions","query","name","then","result","state","checkGEOLocationAccess","sessionStorage","getItem","geoAccess","data","position","getGeoLocationPromise","setItem","err","Promise","resolve","reject"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/utils/location.ts"],"sourcesContent":["import { useContext } from \"react\";\nimport { __RouterContext as RouterContext } from \"react-router\";\n\nexport function useLocation() {\n  const { location, history } = useContext(RouterContext);\n\n  function navigate(to: string, { replace = false } = {}) {\n    if (replace) {\n      history.replace(to);\n    } else {\n      history.push(to);\n    }//@ts-nocheck\n\n  }\n\n  return {\n    location,\n    navigate,\n  };\n}\n\nexport function checkLocation(setShowPopUp: any) {\n  if (!navigator.geolocation) {\n    //console.log(\"Geolocation API not supported by this browser.\");\n  } else {\n    navigator.geolocation.getCurrentPosition(\n      (success) => {},\n      (error) => {\n        setShowPopUp(true);\n      }\n    );\n  }\n}\n\nexport function getGeoLocationAccess() {\n  //if ( permission === 'granted' || permission === 'prompt' || permission === 'denied' )\n  let location: any = navigator.permissions;\n  if (location && location.query) {\n    return navigator.permissions\n      .query({ name: \"geolocation\" })\n      .then((result) => {\n        return result;\n      });\n  } else {\n    return { state: \"No-GEO-Support\" };\n  }\n}\n\nexport async function checkGEOLocationAccess(): Promise<any> {\n  if (\n    sessionStorage.getItem(\"GEOAccess\") &&\n    sessionStorage.getItem(\"isBridgeAccess\")\n  ) {\n    return { geoAccess: true, data: true };\n  } else {\n    try {\n      let position = await getGeoLocationPromise();\n      sessionStorage.setItem(\"GEOAccess\", \"true\");\n      return { geoAccess: true, data: position };\n    } catch (err) {\n      return { geoAccess: 0, data: err };\n    }\n  }\n}\n\nexport function getGeoLocationPromise() {\n  return new Promise((resolve, reject) =>\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n  );\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,eAAe,IAAIC,aAAa,QAAQ,cAAc;AAE/D,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGN,UAAU,CAACE,aAAa,CAAC;EAEvD,SAASK,QAAQA,CAACC,EAAU,EAAE;IAAEC,OAAO,GAAG;EAAM,CAAC,GAAG,CAAC,CAAC,EAAE;IACtD,IAAIA,OAAO,EAAE;MACXH,OAAO,CAACG,OAAO,CAACD,EAAE,CAAC;IACrB,CAAC,MAAM;MACLF,OAAO,CAACI,IAAI,CAACF,EAAE,CAAC;IAClB,CAAC;EAEH;EAEA,OAAO;IACLH,QAAQ;IACRE;EACF,CAAC;AACH;AAACH,EAAA,CAhBeD,WAAW;AAkB3B,OAAO,SAASQ,aAAaA,CAACC,YAAiB,EAAE;EAC/C,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;IAC1B;EAAA,CACD,MAAM;IACLD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,OAAO,IAAK,CAAC,CAAC,EACdC,KAAK,IAAK;MACTL,YAAY,CAAC,IAAI,CAAC;IACpB,CACF,CAAC;EACH;AACF;AAEA,OAAO,SAASM,oBAAoBA,CAAA,EAAG;EACrC;EACA,IAAIb,QAAa,GAAGQ,SAAS,CAACM,WAAW;EACzC,IAAId,QAAQ,IAAIA,QAAQ,CAACe,KAAK,EAAE;IAC9B,OAAOP,SAAS,CAACM,WAAW,CACzBC,KAAK,CAAC;MAAEC,IAAI,EAAE;IAAc,CAAC,CAAC,CAC9BC,IAAI,CAAEC,MAAM,IAAK;MAChB,OAAOA,MAAM;IACf,CAAC,CAAC;EACN,CAAC,MAAM;IACL,OAAO;MAAEC,KAAK,EAAE;IAAiB,CAAC;EACpC;AACF;AAEA,OAAO,eAAeC,sBAAsBA,CAAA,EAAiB;EAC3D,IACEC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,IACnCD,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC,EACxC;IACA,OAAO;MAAEC,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC;EACxC,CAAC,MAAM;IACL,IAAI;MACF,IAAIC,QAAQ,GAAG,MAAMC,qBAAqB,CAAC,CAAC;MAC5CL,cAAc,CAACM,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC;MAC3C,OAAO;QAAEJ,SAAS,EAAE,IAAI;QAAEC,IAAI,EAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAO;QAAEL,SAAS,EAAE,CAAC;QAAEC,IAAI,EAAEI;MAAI,CAAC;IACpC;EACF;AACF;AAEA,OAAO,SAASF,qBAAqBA,CAAA,EAAG;EACtC,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KACjCvB,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACoB,OAAO,EAAEC,MAAM,CAC1D,CAAC;AACH"},"metadata":{},"sourceType":"module"}