{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentAuthCodeClient = /** @class */function (_super) {\n  __extends(SilentAuthCodeClient, _super);\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n            // Auth code payload is required\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n            // Create silent request\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\n            // Handle auth code parameters from request\n            return [2 /*return*/, silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n          case 4:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\nexport { SilentAuthCodeClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentAuthCodeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError, Constants, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\n\r\nexport class SilentAuthCodeClient extends StandardInteractionClient {\r\n    private apiId: ApiId;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */\r\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\r\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\r\n\r\n        // Auth code payload is required\r\n        if (!request.code) {\r\n            throw BrowserAuthError.createAuthCodeRequiredError();\r\n\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n\r\n            // Create auth code request (PKCE not needed)\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n                ...silentRequest,\r\n                code: request.code\r\n            };\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\r\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\r\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create silent handler\r\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n\r\n            // Handle auth code parameters from request\r\n            return silentHandler.handleCodeResponseFromServer(\r\n                {\r\n                    code: request.code,\r\n                    msgraph_host: request.msGraphHost,\r\n                    cloud_graph_host_name: request.cloudGraphHostName,\r\n                    cloud_instance_host_name: request.cloudInstanceHostName\r\n                },\r\n                silentRequest.state,\r\n                authClient.authority,\r\n                this.networkClient,\r\n                false\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}