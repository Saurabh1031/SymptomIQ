{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\nvar DatabaseStorage = /** @class */function () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Closes the connection to IndexedDB database when all pending transactions\r\n   * complete.\r\n   */\n  DatabaseStorage.prototype.closeConnection = function () {\n    var db = this.db;\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.open()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.validateDbIsOpen()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n                _this.closeConnection();\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.validateDbIsOpen()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                _this.closeConnection();\n                resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.validateDbIsOpen()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                _this.closeConnection();\n                resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.validateDbIsOpen()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n                _this.closeConnection();\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.validateDbIsOpen()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n                _this.closeConnection();\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n          this.closeConnection();\n        }\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n          deleteDbRequest.addEventListener(\"success\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"blocked\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"error\", function () {\n            return reject(false);\n          });\n        })];\n      });\n    });\n  };\n  return DatabaseStorage;\n}();\nexport { DatabaseStorage };","map":{"version":3,"sources":["../../src/cache/DatabaseStorage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\r\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\r\n\r\ninterface IDBOpenDBRequestEvent extends Event {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBRequestEvent extends Event {\r\n    target: IDBRequest & EventTarget;\r\n}\r\n\r\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\r\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\r\n    private db: IDBDatabase|undefined;\r\n    private dbName: string;\r\n    private tableName: string;\r\n    private version: number;\r\n    private dbOpen: boolean;\r\n\r\n    constructor() {\r\n        this.dbName = DB_NAME;\r\n        this.version = DB_VERSION;\r\n        this.tableName = DB_TABLE_NAME;\r\n        this.dbOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Opens IndexedDB instance.\r\n     */\r\n    async open(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const openDB = window.indexedDB.open(this.dbName, this.version);\r\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\r\n                const event = e as IDBOpenOnUpgradeNeededEvent;\r\n                event.target.result.createObjectStore(this.tableName);\r\n            });\r\n            openDB.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBOpenDBRequestEvent;\r\n                this.db = event.target.result;\r\n                this.dbOpen = true;\r\n                resolve();\r\n            });\r\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to IndexedDB database when all pending transactions\r\n     * complete.\r\n     */\r\n    closeConnection(): void {\r\n        const db = this.db;\r\n        if (db && this.dbOpen) {\r\n            db.close();\r\n            this.dbOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens database if it's not already open\r\n     */\r\n    private async validateDbIsOpen(): Promise<void> {\r\n        if (!this.dbOpen) {\r\n            return await this.open();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key \r\n     */\r\n    async getItem(key: string): Promise<T | null> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<T>((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGet = objectStore.get(key);\r\n            \r\n            dbGet.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result);\r\n            });\r\n\r\n            dbGet.addEventListener(\"error\", (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key \r\n     * @param payload \r\n     */\r\n    async setItem(key: string, payload: T): Promise<void> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<void>((resolve: Function, reject: Function) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n\r\n            const dbPut = objectStore.put(payload, key);\r\n\r\n            dbPut.addEventListener(\"success\", () => {\r\n                this.closeConnection();\r\n                resolve();\r\n            });\r\n\r\n            dbPut.addEventListener(\"error\", (e) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes item from IndexedDB under given key\r\n     * @param key\r\n     */\r\n    async removeItem(key: string): Promise<void> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<void>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbDelete = objectStore.delete(key);\r\n\r\n            dbDelete.addEventListener(\"success\", () => {\r\n                this.closeConnection();\r\n                resolve();\r\n            });\r\n\r\n            dbDelete.addEventListener(\"error\", (e) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all the keys from the storage object as an iterable array of strings.\r\n     */\r\n    async getKeys(): Promise<string[]> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGetKeys = objectStore.getAllKeys();\r\n\r\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result);\r\n            });\r\n\r\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Checks whether there is an object under the search key in the object store\r\n     */\r\n    async containsKey(key: string): Promise<boolean> {\r\n        await this.validateDbIsOpen();\r\n\r\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbContainsKey = objectStore.count(key);\r\n\r\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result === 1);\r\n            });\r\n\r\n            dbContainsKey.addEventListener(\"error\", (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n     * with IndexedDB database versions.\r\n     */\r\n    async deleteDatabase(): Promise<boolean> {\r\n        // Check if database being deleted exists\r\n\r\n        if (this.db && this.dbOpen) {\r\n            this.closeConnection();\r\n        }\r\n\r\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\r\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\r\n            deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\r\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}