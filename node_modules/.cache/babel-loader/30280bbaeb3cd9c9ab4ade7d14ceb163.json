{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { InteractionRequiredAuthError, AuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from './BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar NativeStatusCode;\n(function (NativeStatusCode) {\n  NativeStatusCode[\"USER_INTERACTION_REQUIRED\"] = \"USER_INTERACTION_REQUIRED\";\n  NativeStatusCode[\"USER_CANCEL\"] = \"USER_CANCEL\";\n  NativeStatusCode[\"NO_NETWORK\"] = \"NO_NETWORK\";\n  NativeStatusCode[\"TRANSIENT_ERROR\"] = \"TRANSIENT_ERROR\";\n  NativeStatusCode[\"PERSISTENT_ERROR\"] = \"PERSISTENT_ERROR\";\n  NativeStatusCode[\"DISABLED\"] = \"DISABLED\";\n  NativeStatusCode[\"ACCOUNT_UNAVAILABLE\"] = \"ACCOUNT_UNAVAILABLE\";\n})(NativeStatusCode || (NativeStatusCode = {}));\nvar NativeAuthErrorMessage = {\n  extensionError: {\n    code: \"ContentError\"\n  },\n  userSwitch: {\n    code: \"user_switch\",\n    desc: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\n  },\n  tokensNotFoundInCache: {\n    code: \"tokens_not_found_in_internal_memory_cache\",\n    desc: \"Tokens not cached in MSAL JS internal memory, please make the WAM request\"\n  }\n};\nvar NativeAuthError = /** @class */function (_super) {\n  __extends(NativeAuthError, _super);\n  function NativeAuthError(errorCode, description, ext) {\n    var _this = _super.call(this, errorCode, description) || this;\n    Object.setPrototypeOf(_this, NativeAuthError.prototype);\n    _this.name = \"NativeAuthError\";\n    _this.ext = ext;\n    return _this;\n  }\n  /**\r\n   * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n   */\n  NativeAuthError.prototype.isFatal = function () {\n    if (this.ext && this.ext.status && (this.ext.status === NativeStatusCode.PERSISTENT_ERROR || this.ext.status === NativeStatusCode.DISABLED)) {\n      return true;\n    }\n    switch (this.errorCode) {\n      case NativeAuthErrorMessage.extensionError.code:\n        return true;\n      default:\n        return false;\n    }\n  };\n  /**\r\n   * Create the appropriate error object based on the WAM status code.\r\n   * @param code\r\n   * @param description\r\n   * @param ext\r\n   * @returns\r\n   */\n  NativeAuthError.createError = function (code, description, ext) {\n    if (ext && ext.status) {\n      switch (ext.status) {\n        case NativeStatusCode.ACCOUNT_UNAVAILABLE:\n          return InteractionRequiredAuthError.createNativeAccountUnavailableError();\n        case NativeStatusCode.USER_INTERACTION_REQUIRED:\n          return new InteractionRequiredAuthError(code, description);\n        case NativeStatusCode.USER_CANCEL:\n          return BrowserAuthError.createUserCancelledError();\n        case NativeStatusCode.NO_NETWORK:\n          return BrowserAuthError.createNoNetworkConnectivityError();\n      }\n    }\n    return new NativeAuthError(code, description, ext);\n  };\n  /**\r\n   * Creates user switch error when the user chooses a different account in the native broker prompt\r\n   * @returns\r\n   */\n  NativeAuthError.createUserSwitchError = function () {\n    return new NativeAuthError(NativeAuthErrorMessage.userSwitch.code, NativeAuthErrorMessage.userSwitch.desc);\n  };\n  /**\r\n   * Creates a tokens not found error when the internal cache look up fails\r\n   * @returns NativeAuthError: tokensNotFoundInCache\r\n   */\n  NativeAuthError.createTokensNotFoundInCacheError = function () {\n    return new NativeAuthError(NativeAuthErrorMessage.tokensNotFoundInCache.code, NativeAuthErrorMessage.tokensNotFoundInCache.desc);\n  };\n  return NativeAuthError;\n}(AuthError);\nexport { NativeAuthError, NativeAuthErrorMessage, NativeStatusCode };","map":{"version":3,"sources":["../../src/error/NativeAuthError.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError, InteractionRequiredAuthError } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"./BrowserAuthError\";\r\n\r\nexport type OSError = {\r\n    error: number;\r\n    protocol_error: string;\r\n    properties: object;\r\n    status: string;\r\n    retryable?: boolean;\r\n};\r\n\r\nexport enum NativeStatusCode {\r\n    USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\",\r\n    USER_CANCEL = \"USER_CANCEL\",\r\n    NO_NETWORK = \"NO_NETWORK\",\r\n    TRANSIENT_ERROR = \"TRANSIENT_ERROR\",\r\n    PERSISTENT_ERROR = \"PERSISTENT_ERROR\",\r\n    DISABLED = \"DISABLED\",\r\n    ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\"\r\n}\r\n\r\nexport const NativeAuthErrorMessage = {\r\n    extensionError: {\r\n        code: \"ContentError\"\r\n    },\r\n    userSwitch: {\r\n        code: \"user_switch\",\r\n        desc: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\r\n    },\r\n    tokensNotFoundInCache: {\r\n        code: \"tokens_not_found_in_internal_memory_cache\",\r\n        desc: \"Tokens not cached in MSAL JS internal memory, please make the WAM request\"\r\n    }\r\n};\r\n\r\nexport class NativeAuthError extends AuthError {\r\n    ext: OSError | undefined;\r\n\r\n    constructor(errorCode: string, description: string, ext?: OSError) {\r\n        super(errorCode, description);\r\n\r\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\r\n        this.name = \"NativeAuthError\";\r\n        this.ext = ext;\r\n    }\r\n\r\n    /**\r\n     * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n     */\r\n    isFatal(): boolean {\r\n        if (this.ext && this.ext.status && (this.ext.status === NativeStatusCode.PERSISTENT_ERROR || this.ext.status === NativeStatusCode.DISABLED)) {\r\n            return true;\r\n        }\r\n\r\n        switch (this.errorCode) {\r\n            case NativeAuthErrorMessage.extensionError.code:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the appropriate error object based on the WAM status code.\r\n     * @param code\r\n     * @param description\r\n     * @param ext\r\n     * @returns\r\n     */\r\n    static createError(code: string, description: string, ext?: OSError): AuthError {\r\n        if (ext && ext.status) {\r\n            switch (ext.status) {\r\n                case NativeStatusCode.ACCOUNT_UNAVAILABLE:\r\n                    return InteractionRequiredAuthError.createNativeAccountUnavailableError();\r\n                case NativeStatusCode.USER_INTERACTION_REQUIRED:\r\n                    return new InteractionRequiredAuthError(code, description);\r\n                case NativeStatusCode.USER_CANCEL:\r\n                    return BrowserAuthError.createUserCancelledError();\r\n                case NativeStatusCode.NO_NETWORK:\r\n                    return BrowserAuthError.createNoNetworkConnectivityError();\r\n            }\r\n        }\r\n\r\n        return new NativeAuthError(code, description, ext);\r\n    }\r\n\r\n    /**\r\n     * Creates user switch error when the user chooses a different account in the native broker prompt\r\n     * @returns\r\n     */\r\n    static createUserSwitchError(): NativeAuthError {\r\n        return new NativeAuthError(NativeAuthErrorMessage.userSwitch.code, NativeAuthErrorMessage.userSwitch.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates a tokens not found error when the internal cache look up fails\r\n     * @returns NativeAuthError: tokensNotFoundInCache\r\n     */\r\n    static createTokensNotFoundInCacheError(): NativeAuthError {\r\n        return new NativeAuthError(NativeAuthErrorMessage.tokensNotFoundInCache.code, NativeAuthErrorMessage.tokensNotFoundInCache.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}