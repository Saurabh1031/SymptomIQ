{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nvar S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nvar MODULUS_LENGTH = 2048;\n// Public Exponent\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\nvar BrowserCrypto = /** @class */function () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    }\n    // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return [2 /*return*/, this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n  return BrowserCrypto;\n}();\nexport { BrowserCrypto };","map":{"version":3,"sources":["../../src/crypto/BrowserCrypto.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\r\nimport { ModernBrowserCrypto } from \"./ModernBrowserCrypto\";\r\nimport { MsrBrowserCrypto } from \"./MsrBrowserCrypto\";\r\nimport { MsBrowserCrypto } from \"./MsBrowserCrypto\";\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// RSA KeyGen Algorithm\r\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\n// SHA-256 hashing algorithm\r\nconst S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nconst MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\r\n\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nexport class BrowserCrypto {\r\n\r\n    private keygenAlgorithmOptions: RsaHashedKeyGenParams;\r\n    private subtleCrypto: ISubtleCrypto;\r\n    private logger: Logger;\r\n    private cryptoOptions?: CryptoOptions;\r\n\r\n    constructor(logger: Logger, cryptoOptions?: CryptoOptions) {\r\n        this.logger = logger;\r\n        this.cryptoOptions = cryptoOptions;\r\n\r\n        if (this.hasBrowserCrypto()) {\r\n            // Use standard modern web crypto if available\r\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\r\n            this.subtleCrypto = new ModernBrowserCrypto();\r\n        } else if (this.hasIECrypto()) {\r\n            // For IE11, use msCrypto interface\r\n            this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\r\n            this.subtleCrypto = new MsBrowserCrypto();\r\n        } else if (this.hasMsrCrypto() && this.cryptoOptions?.useMsrCrypto) {\r\n            // For other browsers, use MSR Crypto if found\r\n            this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\r\n            this.subtleCrypto = new MsrBrowserCrypto();\r\n        } else {\r\n            if (this.hasMsrCrypto()) {\r\n                this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\r\n            }\r\n            this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\r\n        }\r\n\r\n        // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\r\n        if (this.subtleCrypto.initPrng) {\r\n            this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\r\n\r\n            if (!this.cryptoOptions?.entropy) {\r\n                this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\r\n                throw BrowserConfigurationAuthError.createEntropyNotProvided();\r\n            }\r\n\r\n            this.logger.verbose(\"BrowserCrypto: Entropy provided\");\r\n            this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\r\n        }\r\n\r\n        this.keygenAlgorithmOptions = {\r\n            name: PKCS1_V15_KEYGEN_ALG,\r\n            hash: S256_HASH_ALG,\r\n            modulusLength: MODULUS_LENGTH,\r\n            publicExponent: PUBLIC_EXPONENT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    private hasIECrypto(): boolean {\r\n        return \"msCrypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    private hasBrowserCrypto(): boolean {\r\n        return \"crypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Check whether MSR crypto polyfill is available\r\n     */\r\n    private hasMsrCrypto(): boolean {\r\n        return \"msrCrypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString \r\n     */\r\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\r\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n        // MSR Crypto wants object with name property, instead of string\r\n        return this.subtleCrypto.digest({ name: S256_HASH_ALG }, data);\r\n    }\r\n\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer \r\n     */\r\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\r\n        return this.subtleCrypto.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair based on current keygen algorithm config.\r\n     * @param extractable \r\n     * @param usages \r\n     */\r\n    async generateKeyPair(extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKeyPair> {\r\n        return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\r\n    }\r\n\r\n    /**\r\n     * Export key as Json Web Key (JWK)\r\n     * @param key \r\n     * @param format \r\n     */\r\n    async exportJwk(key: CryptoKey): Promise<JsonWebKey> {\r\n        return this.subtleCrypto.exportKey(key);\r\n    }\r\n\r\n    /**\r\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n     * @param key \r\n     * @param format \r\n     * @param extractable \r\n     * @param usages \r\n     */\r\n    async importJwk(key: JsonWebKey, extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKey> {\r\n        return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\r\n    }\r\n\r\n    /**\r\n     * Signs given data with given key\r\n     * @param key \r\n     * @param data \r\n     */\r\n    async sign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\r\n        return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}