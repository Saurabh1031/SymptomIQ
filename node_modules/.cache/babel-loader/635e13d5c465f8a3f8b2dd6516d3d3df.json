{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\nvar ScopeSet = /** @class */function () {\n  function ScopeSet(inputScopes) {\n    var _this = this;\n    // Filter empty string and null/undefined array items\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || Constants.EMPTY_STRING;\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Creates the set of scopes to search for in cache lookups\r\n   * @param inputScopeString\r\n   * @returns\r\n   */\n  ScopeSet.createSearchScopes = function (inputScopeString) {\n    var scopeSet = new ScopeSet(inputScopeString);\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n    return scopeSet;\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n  return ScopeSet;\n}();\nexport { ScopeSet };","map":{"version":3,"sources":["../../src/request/ScopeSet.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\r\n\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nexport class ScopeSet {\r\n    // Scopes as a Set of strings\r\n    private scopes: Set<string>;\r\n\r\n    constructor(inputScopes: Array<string>) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\r\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n\r\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(scope => this.scopes.add(scope));\r\n    }\r\n\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString: string): ScopeSet {\r\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\r\n        const inputScopes: Array<string> = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n\r\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString \r\n     * @returns \r\n     */\r\n    static createSearchScopes(inputScopeString: Array<string>): ScopeSet {\r\n        const scopeSet = new ScopeSet(inputScopeString);\r\n        if (!scopeSet.containsOnlyOIDCScopes()) {\r\n            scopeSet.removeOIDCScopes();\r\n        } else {\r\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n\r\n        return scopeSet;\r\n    }\r\n\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    private validateInputScopes(inputScopes: Array<string>): void {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope: string): boolean {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    }\r\n\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet: ScopeSet): boolean {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\r\n    }\r\n\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes(): boolean {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope: string): void {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes: Array<string>): void {\r\n        try {\r\n            newScopes.forEach(newScope => this.appendScope(newScope));\r\n        } catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope: string): void {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes(): void {\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        \r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    }\r\n\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount(): number {\r\n        return this.scopes.size;\r\n    }\r\n\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray(): Array<string> {\r\n        const array: Array<string> = [];\r\n        this.scopes.forEach(val => array.push(val));\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes(): string {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase(): string {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}