{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nvar AuthenticationHeaderParser = /** @class */function () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    }\n    // If neither header is present, throw missing headers error\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n        key = _a[0],\n        value = _a[1];\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n  return AuthenticationHeaderParser;\n}();\nexport { AuthenticationHeaderParser };","map":{"version":3,"sources":["../../src/request/AuthenticationHeaderParser.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;AAaH;;;AAGG;AACH,IAAA,0BAAA,GAAA,aAAA,YAAA;EAGI,SAAA,0BAAA,CAAY,OAA+B,EAAA;IACvC,IAAI,CAAC,OAAO,GAAG,OAAO;EACzB;EAED;;;AAGG;EACH,0BAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;;IAEI,IAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,kBAAkB,CAAC;IACvE,IAAI,kBAAkB,EAAE;MACpB,IAAM,4BAA4B,GAAG,IAAI,CAAC,eAAe,CAA+B,kBAAkB,CAAC;MAC3G,IAAI,4BAA4B,CAAC,SAAS,EAAE;QACxC,OAAO,4BAA4B,CAAC,SAAS;MAChD;MACD,MAAM,wBAAwB,CAAC,sCAAsC,CAAC,WAAW,CAAC,kBAAkB,EAAE,iCAAiC,CAAC;IAC3I;;IAGD,IAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC;IACjE,IAAI,eAAe,EAAE;MACjB,IAAM,yBAAyB,GAAG,IAAI,CAAC,eAAe,CAA4B,eAAe,CAAC;MAClG,IAAI,yBAAyB,CAAC,KAAK,EAAC;QAChC,OAAO,yBAAyB,CAAC,KAAK;MACzC;MACD,MAAM,wBAAwB,CAAC,sCAAsC,CAAC,WAAW,CAAC,eAAe,EAAE,6BAA6B,CAAC;IACpI;;IAGD,MAAM,wBAAwB,CAAC,4CAA4C,CAAA,CAAE;GAChF;EAED;;;;AAIG;EACK,0BAAe,CAAA,SAAA,CAAA,eAAA,GAAvB,UAA2B,MAAc,EAAA;IACrC,IAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;IAC3C,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;IAChE,IAAM,YAAY,GAAG,CAAA,CAAO;IAE5B,UAAU,CAAC,OAAO,CAAC,UAAC,SAAiB,EAAA;MAC3B,IAAA,EAAiB,GAAA,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC;QAAnC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,KAAK,GAAA,EAAA,CAAA,CAAA,CAAyB;;MAE3C,YAAY,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;IACjF,CAAC,CAAC;IAEF,OAAO,YAAY;GACtB;EACL,OAAC,0BAAA;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { Constants, HeaderNames } from \"../utils/Constants\";\r\n\r\ntype WWWAuthenticateChallenges = {\r\n    nonce?: string,\r\n};\r\n\r\ntype AuthenticationInfoChallenges = {\r\n    nextnonce?: string\r\n};\r\n\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nexport class AuthenticationHeaderParser {\r\n    private headers: Record<string, string>;\r\n\r\n    constructor(headers: Record<string, string>) {\r\n        this.headers = headers;\r\n    }\r\n\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns \r\n     */\r\n    getShrNonce(): string {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            const authenticationInfoChallenges = this.parseChallenges<AuthenticationInfoChallenges>(authenticationInfo);\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\r\n        }\r\n\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            const wwwAuthenticateChallenges = this.parseChallenges<WWWAuthenticateChallenges>(wwwAuthenticate);     \r\n            if (wwwAuthenticateChallenges.nonce){\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\r\n        }\r\n\r\n        // If neither header is present, throw missing headers error\r\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\r\n    }\r\n\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header \r\n     * @returns \r\n     */\r\n    private parseChallenges<T>(header: string): T {\r\n        const schemeSeparator = header.indexOf(\" \");\r\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        const challengeMap = {} as T;\r\n\r\n        challenges.forEach((challenge: string) => {\r\n            const [ key, value ] = challenge.split(\"=\");\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\r\n        });\r\n\r\n        return challengeMap;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}