{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nvar InteractionHandler = /** @class */function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n        return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            // Acquire token with retrieved code.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n    return null;\n  };\n  return InteractionHandler;\n}();\nexport { InteractionHandler };","map":{"version":3,"sources":["../../src/interaction_handler/InteractionHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorizationCodePayload, StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger, ServerError, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\n\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected logger: Logger;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, performanceClient: IPerformanceClient) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\r\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        let authCodeResponse;\r\n        try {\r\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n        } catch (e) {\r\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                throw BrowserAuthError.createUserCancelledError();\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\r\n    }\r\n\r\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse \r\n     * @param state \r\n     * @param authority \r\n     * @param networkModule \r\n     * @returns \r\n     */\r\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\r\n        if (validateNonce) {\r\n            authCodeResponse.nonce = cachedNonce || undefined;\r\n        }\r\n\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}