{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AsyncMemoryStorage } from './AsyncMemoryStorage.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar CryptoKeyStoreNames;\n(function (CryptoKeyStoreNames) {\n  CryptoKeyStoreNames[\"asymmetricKeys\"] = \"asymmetricKeys\";\n  CryptoKeyStoreNames[\"symmetricKeys\"] = \"symmetricKeys\";\n})(CryptoKeyStoreNames || (CryptoKeyStoreNames = {}));\n/**\r\n * MSAL CryptoKeyStore DB Version 2\r\n */\nvar CryptoKeyStore = /** @class */function () {\n  function CryptoKeyStore(logger) {\n    this.logger = logger;\n    this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);\n    this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);\n  }\n  CryptoKeyStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Delete in-memory keystores\n            this.asymmetricKeys.clearInMemory();\n            this.symmetricKeys.clearInMemory();\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.asymmetricKeys.clearPersistent()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 3:\n            e_1 = _a.sent();\n            if (e_1 instanceof Error) {\n              this.logger.error(\"Clearing keystore failed with error: \" + e_1.message);\n            } else {\n              this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n            return [2 /*return*/, false];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return CryptoKeyStore;\n}();\nexport { CryptoKeyStore, CryptoKeyStoreNames };","map":{"version":3,"sources":["../../src/cache/CryptoKeyStore.ts"],"names":[],"mappings":";;;;;;AAAA;;;;IASY,mBAAA;AAAZ,CAAA,UAAY,mBAAmB,EAAA;EAC3B,mBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,mBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B;AACnC,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,GAAA,CAAA,CAAA,CAAA,CAAA;AAI/B;;;;EAQI,SAAA,cAAA,CAAY,MAAc,EAAA;IACtB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,cAAc,GAAG,IAAI,kBAAkB,CAAgB,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,cAAc,CAAC;IAC5G,IAAI,CAAC,aAAa,GAAG,IAAI,kBAAkB,CAAY,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;EACzG;EAEK,cAAA,CAAA,SAAA,CAAA,KAAK,GAAX,YAAA;;;;;;;YAEI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAA,CAAE;YACtC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAA,CAAE;;;;YAO3B,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAA,CAAE,CAAA;;YAA3C,EAAA,CAAA,IAAA,CAAA,CAA2C;YAC3C,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA;;;YAEX,IAAI,GAAC,YAAY,KAAK,EAAE;cACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAA,GAAwC,GAAC,CAAC,OAAS,CAAC;aACzE,MAAM;cACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC;YACnE;YAED,OAAA,CAAA,CAAA,CAAA,YAAO,KAAK,CAAA;;;;;;GAEnB;EACL,OAAA,cAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { CachedKeyPair } from \"../crypto/CryptoOps\";\r\nimport { AsyncMemoryStorage } from \"./AsyncMemoryStorage\";\r\n\r\nexport enum CryptoKeyStoreNames {\r\n    asymmetricKeys = \"asymmetricKeys\",\r\n    symmetricKeys = \"symmetricKeys\"\r\n}\r\n/**\r\n * MSAL CryptoKeyStore DB Version 2\r\n */\r\nexport class CryptoKeyStore {\r\n    public asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\r\n    public symmetricKeys: AsyncMemoryStorage<CryptoKey>;\r\n    public logger: Logger;\r\n\r\n    constructor(logger: Logger){\r\n        this.logger = logger;\r\n        this.asymmetricKeys = new AsyncMemoryStorage<CachedKeyPair>(this.logger, CryptoKeyStoreNames.asymmetricKeys);\r\n        this.symmetricKeys = new AsyncMemoryStorage<CryptoKey>(this.logger, CryptoKeyStoreNames.symmetricKeys);\r\n    }\r\n\r\n    async clear(): Promise<boolean> {\r\n        // Delete in-memory keystores\r\n        this.asymmetricKeys.clearInMemory();\r\n\t    this.symmetricKeys.clearInMemory();\r\n\t\t\r\n        /**\r\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n         * every persistent keystore\r\n         */\r\n        try {\r\n            await this.asymmetricKeys.clearPersistent();\r\n            return true;\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                this.logger.error(`Clearing keystore failed with error: ${e.message}`);\r\n            } else {\r\n                this.logger.error(\"Clearing keystore failed with unknown error\");\r\n            }\r\n            \r\n            return false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}