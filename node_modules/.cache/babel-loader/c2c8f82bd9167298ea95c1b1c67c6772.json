{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\nvar XhrClient = /** @class */function () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, /* async: */true);\n      _this.setXhrHeaders(xhr, options);\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n  return XhrClient;\n}();\nexport { XhrClient };","map":{"version":3,"sources":["../../src/network/XhrClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nexport class XhrClient implements INetworkModule {\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\r\n    }\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\r\n    }\r\n\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url \r\n     * @param method \r\n     * @param options \r\n     */\r\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            this.setXhrHeaders(xhr, options);\r\n            xhr.onload = (): void => {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                }\r\n                try {\r\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\r\n                    const networkResponse: NetworkResponse<T> = {\r\n                        headers: this.getHeaderDict(xhr),\r\n                        body: jsonResponse,\r\n                        status: xhr.status\r\n                    };\r\n                    resolve(networkResponse);\r\n                } catch (e) {\r\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = (): void => {\r\n                if (window.navigator.onLine) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                } else {\r\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\r\n                }\r\n            };\r\n\r\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\r\n                xhr.send(options.body);\r\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\r\n                xhr.send();\r\n            } else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr \r\n     * @param options \r\n     */\r\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\r\n        if (options && options.headers) {\r\n            const headers = options.headers;\r\n            Object.keys(headers).forEach((key: string) => {\r\n                xhr.setRequestHeader(key, headers[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string map of the headers received in the response.\r\n     * \r\n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n     * @param xhr \r\n     */\r\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\r\n        const headerString = xhr.getAllResponseHeaders();\r\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\r\n        const headerDict: Record<string, string> = {};\r\n        headerArr.forEach((value: string) => {\r\n            const parts = value.split(\": \");\r\n            const headerName = parts.shift();\r\n            const headerVal = parts.join(\": \");\r\n            if (headerName && headerVal) {\r\n                headerDict[headerName] = headerVal;\r\n            }\r\n        });\r\n\r\n        return headerDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}