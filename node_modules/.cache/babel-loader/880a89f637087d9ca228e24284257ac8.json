{"ast":null,"code":"import{useContext}from\"react\";import{__RouterContext as RouterContext}from\"react-router\";export function useLocation(){const{location,history}=useContext(RouterContext);function navigate(to){let{replace=false}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(replace){history.replace(to);}else{history.push(to);}//@ts-nocheck\n}return{location,navigate};}export function checkLocation(setShowPopUp){if(!navigator.geolocation){//console.log(\"Geolocation API not supported by this browser.\");\n}else{navigator.geolocation.getCurrentPosition(success=>{},error=>{setShowPopUp(true);});}}export function getGeoLocationAccess(){//if ( permission === 'granted' || permission === 'prompt' || permission === 'denied' )\nlet location=navigator.permissions;if(location&&location.query){return navigator.permissions.query({name:\"geolocation\"}).then(result=>{return result;});}else{return{state:\"No-GEO-Support\"};}}export async function checkGEOLocationAccess(){if(sessionStorage.getItem(\"GEOAccess\")&&sessionStorage.getItem(\"isBridgeAccess\")){return{geoAccess:true,data:true};}else{try{let position=await getGeoLocationPromise();sessionStorage.setItem(\"GEOAccess\",\"true\");return{geoAccess:true,data:position};}catch(err){return{geoAccess:0,data:err};}}}export function getGeoLocationPromise(){return new Promise((resolve,reject)=>navigator.geolocation.getCurrentPosition(resolve,reject));}","map":{"version":3,"names":["useContext","__RouterContext","RouterContext","useLocation","location","history","navigate","to","replace","arguments","length","undefined","push","checkLocation","setShowPopUp","navigator","geolocation","getCurrentPosition","success","error","getGeoLocationAccess","permissions","query","name","then","result","state","checkGEOLocationAccess","sessionStorage","getItem","geoAccess","data","position","getGeoLocationPromise","setItem","err","Promise","resolve","reject"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/utils/location.ts"],"sourcesContent":["import { useContext } from \"react\";\nimport { __RouterContext as RouterContext } from \"react-router\";\n\nexport function useLocation() {\n  const { location, history } = useContext(RouterContext);\n\n  function navigate(to: string, { replace = false } = {}) {\n    if (replace) {\n      history.replace(to);\n    } else {\n      history.push(to);\n    }//@ts-nocheck\n\n  }\n\n  return {\n    location,\n    navigate,\n  };\n}\n\nexport function checkLocation(setShowPopUp: any) {\n  if (!navigator.geolocation) {\n    //console.log(\"Geolocation API not supported by this browser.\");\n  } else {\n    navigator.geolocation.getCurrentPosition(\n      (success) => {},\n      (error) => {\n        setShowPopUp(true);\n      }\n    );\n  }\n}\n\nexport function getGeoLocationAccess() {\n  //if ( permission === 'granted' || permission === 'prompt' || permission === 'denied' )\n  let location: any = navigator.permissions;\n  if (location && location.query) {\n    return navigator.permissions\n      .query({ name: \"geolocation\" })\n      .then((result) => {\n        return result;\n      });\n  } else {\n    return { state: \"No-GEO-Support\" };\n  }\n}\n\nexport async function checkGEOLocationAccess(): Promise<any> {\n  if (\n    sessionStorage.getItem(\"GEOAccess\") &&\n    sessionStorage.getItem(\"isBridgeAccess\")\n  ) {\n    return { geoAccess: true, data: true };\n  } else {\n    try {\n      let position = await getGeoLocationPromise();\n      sessionStorage.setItem(\"GEOAccess\", \"true\");\n      return { geoAccess: true, data: position };\n    } catch (err) {\n      return { geoAccess: 0, data: err };\n    }\n  }\n}\n\nexport function getGeoLocationPromise() {\n  return new Promise((resolve, reject) =>\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n  );\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,OAAO,CAClC,OAASC,eAAe,GAAI,CAAAC,aAAa,KAAQ,cAAc,CAE/D,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAAG,CAC5B,KAAM,CAAEC,QAAQ,CAAEC,OAAQ,CAAC,CAAGL,UAAU,CAACE,aAAa,CAAC,CAEvD,QAAS,CAAAI,QAAQA,CAACC,EAAU,CAA4B,IAA1B,CAAEC,OAAO,CAAG,KAAM,CAAC,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACpD,GAAID,OAAO,CAAE,CACXH,OAAO,CAACG,OAAO,CAACD,EAAE,CAAC,CACrB,CAAC,IAAM,CACLF,OAAO,CAACO,IAAI,CAACL,EAAE,CAAC,CAClB,CAAC;AAEH,CAEA,MAAO,CACLH,QAAQ,CACRE,QACF,CAAC,CACH,CAEA,MAAO,SAAS,CAAAO,aAAaA,CAACC,YAAiB,CAAE,CAC/C,GAAI,CAACC,SAAS,CAACC,WAAW,CAAE,CAC1B;AAAA,CACD,IAAM,CACLD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,OAAO,EAAK,CAAC,CAAC,CACdC,KAAK,EAAK,CACTL,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CACH,CACF,CAEA,MAAO,SAAS,CAAAM,oBAAoBA,CAAA,CAAG,CACrC;AACA,GAAI,CAAAhB,QAAa,CAAGW,SAAS,CAACM,WAAW,CACzC,GAAIjB,QAAQ,EAAIA,QAAQ,CAACkB,KAAK,CAAE,CAC9B,MAAO,CAAAP,SAAS,CAACM,WAAW,CACzBC,KAAK,CAAC,CAAEC,IAAI,CAAE,aAAc,CAAC,CAAC,CAC9BC,IAAI,CAAEC,MAAM,EAAK,CAChB,MAAO,CAAAA,MAAM,CACf,CAAC,CAAC,CACN,CAAC,IAAM,CACL,MAAO,CAAEC,KAAK,CAAE,gBAAiB,CAAC,CACpC,CACF,CAEA,MAAO,eAAe,CAAAC,sBAAsBA,CAAA,CAAiB,CAC3D,GACEC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,EACnCD,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC,CACxC,CACA,MAAO,CAAEC,SAAS,CAAE,IAAI,CAAEC,IAAI,CAAE,IAAK,CAAC,CACxC,CAAC,IAAM,CACL,GAAI,CACF,GAAI,CAAAC,QAAQ,CAAG,KAAM,CAAAC,qBAAqB,CAAC,CAAC,CAC5CL,cAAc,CAACM,OAAO,CAAC,WAAW,CAAE,MAAM,CAAC,CAC3C,MAAO,CAAEJ,SAAS,CAAE,IAAI,CAAEC,IAAI,CAAEC,QAAS,CAAC,CAC5C,CAAE,MAAOG,GAAG,CAAE,CACZ,MAAO,CAAEL,SAAS,CAAE,CAAC,CAAEC,IAAI,CAAEI,GAAI,CAAC,CACpC,CACF,CACF,CAEA,MAAO,SAAS,CAAAF,qBAAqBA,CAAA,CAAG,CACtC,MAAO,IAAI,CAAAG,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GACjCvB,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACoB,OAAO,CAAEC,MAAM,CAC1D,CAAC,CACH"},"metadata":{},"sourceType":"module"}