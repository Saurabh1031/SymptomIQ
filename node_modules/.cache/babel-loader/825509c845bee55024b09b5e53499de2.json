{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectHandler = /** @class */function (_super) {\n  __extends(RedirectHandler, _super);\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) || this;\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n              this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3 /*break*/, 4];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3 /*break*/, 2];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2 /*return*/];\n          case 3:\n            return [3 /*break*/, 6];\n          case 4:\n            // Navigate window to request URL\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 5:\n            _a.sent();\n            return [2 /*return*/];\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n  RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n            // Check that location hash isn't empty.\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n            // Interaction is completed - remove interaction status.\n            this.browserStorage.setInteractionInProgress(false);\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            try {\n              authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            } catch (e) {\n              if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n              } else {\n                throw e;\n              }\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  return RedirectHandler;\n}(InteractionHandler);\nexport { RedirectHandler };","map":{"version":3,"sources":["../../src/interaction_handler/RedirectHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, Authority, INetworkModule, ClientAuthError, Logger, ServerError, IPerformanceClient } from \"@azure/msal-common\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\n\r\nexport type RedirectParams = InteractionParams & {\r\n    navigationClient: INavigationClient;\r\n    redirectTimeout: number;\r\n    redirectStartPage: string;\r\n    onRedirectNavigate?: (url: string) => void | boolean;\r\n};\r\n\r\nexport class RedirectHandler extends InteractionHandler {\r\n\r\n    private browserCrypto: ICrypto;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, browserCrypto: ICrypto, performanceClient: IPerformanceClient) {\r\n        super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\r\n        this.browserCrypto = browserCrypto;\r\n    }\r\n\r\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate\r\n     */\r\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\r\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\r\n        // Navigate if valid URL\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\r\n            if (params.redirectStartPage) {\r\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\r\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\r\n            }\r\n\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\r\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\r\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\r\n            const navigationOptions: NavigationOptions = {\r\n                apiId: ApiId.acquireTokenRedirect,\r\n                timeout: params.redirectTimeout,\r\n                noHistory: false\r\n            };\r\n            \r\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\r\n            if (typeof params.onRedirectNavigate === \"function\") {\r\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\r\n                const navigate = params.onRedirectNavigate(requestUrl);\r\n\r\n                // Returning false from onRedirectNavigate will stop navigation\r\n                if (navigate !== false) {\r\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\r\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\r\n                    return;\r\n                } else {\r\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\r\n                    return;\r\n                }\r\n            } else {\r\n                // Navigate window to request URL\r\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\r\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\r\n                return;\r\n            }\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash\r\n     */\r\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\r\n\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.setInteractionInProgress(false);\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        let authCodeResponse;\r\n        try {\r\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n        } catch (e) {\r\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                throw BrowserAuthError.createUserCancelledError();\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        authCodeResponse.nonce = cachedNonce || undefined;\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}