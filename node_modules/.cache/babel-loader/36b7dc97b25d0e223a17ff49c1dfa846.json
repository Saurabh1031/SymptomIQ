{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\nvar CredentialEntity = /** @class */function () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * generates credential key\r\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n   */\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate requested claims key component as per schema: <requestedClaims>\r\n   */\n  CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate scheme key componenet as per schema: <scheme>\r\n   */\n  CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  };\n  return CredentialEntity;\n}();\nexport { CredentialEntity };","map":{"version":3,"sources":["../../../src/cache/entities/CredentialEntity.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Separators, CredentialType, CacheType, Constants, AuthenticationScheme } from \"../../utils/Constants\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\r\nexport class CredentialEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    credentialType: CredentialType;\r\n    clientId: string;\r\n    secret: string;\r\n    familyId?: string;\r\n    realm?: string;\r\n    target?: string;\r\n    userAssertionHash?: string;\r\n    tokenType?: AuthenticationScheme;\r\n    keyId?: string;\r\n    requestedClaimsHash?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    }\r\n\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    generateCredentialId(): string {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    generateTarget(): string {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    generateCredentialKey(): string {\r\n        return CredentialEntity.generateCredentialCacheKey(\r\n            this.homeAccountId,\r\n            this.environment,\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.target,\r\n            this.familyId,\r\n            this.tokenType,\r\n            this.requestedClaimsHash,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    generateType(): number {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    static generateCredentialCacheKey(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        target?: string,\r\n        familyId?: string,\r\n        tokenType?: AuthenticationScheme,\r\n        requestedClaimsHash?: string\r\n    ): string {\r\n        const credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\r\n            this.generateSchemeForCacheKey(tokenType)\r\n        ];\r\n\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    private static generateAccountIdForCacheKey(\r\n        homeAccountId: string,\r\n        environment: string\r\n    ): string {\r\n        const accountId: Array<string> = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    private static generateCredentialIdForCacheKey(\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const clientOrFamilyId =\r\n            credentialType === CredentialType.REFRESH_TOKEN\r\n                ? familyId || clientId\r\n                : clientId;\r\n        const credentialId: Array<string> = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || Constants.EMPTY_STRING,\r\n        ];\r\n\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    private static generateTargetForCacheKey(scopes?: string): string {\r\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate requested claims key component as per schema: <requestedClaims>\r\n     */\r\n    private static generateClaimsHashForCacheKey(requestedClaimsHash?: string): string {\r\n        return(requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate scheme key componenet as per schema: <scheme>\r\n     */\r\n    private static generateSchemeForCacheKey(tokenType?: string): string {\r\n        /*\r\n         * PoP Tokens and SSH certs include scheme in cache key\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}