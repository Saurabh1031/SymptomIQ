{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar AuthorityMetadataEntity = /** @class */function () {\n  function AuthorityMetadataEntity() {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\r\n   * Update the entity with new aliases, preferred_cache and preferred_network values\r\n   * @param metadata\r\n   * @param fromNetwork\r\n   */\n  AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {\n    this.aliases = metadata.aliases;\n    this.preferred_cache = metadata.preferred_cache;\n    this.preferred_network = metadata.preferred_network;\n    this.aliasesFromNetwork = fromNetwork;\n  };\n  /**\r\n   * Update the entity with new endpoints\r\n   * @param metadata\r\n   * @param fromNetwork\r\n   */\n  AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {\n    this.authorization_endpoint = metadata.authorization_endpoint;\n    this.token_endpoint = metadata.token_endpoint;\n    this.end_session_endpoint = metadata.end_session_endpoint;\n    this.issuer = metadata.issuer;\n    this.endpointsFromNetwork = fromNetwork;\n    this.jwks_uri = metadata.jwks_uri;\n  };\n  /**\r\n   * Save the authority that was used to create this cache entry\r\n   * @param authority\r\n   */\n  AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {\n    this.canonical_authority = authority;\n  };\n  /**\r\n   * Reset the exiresAt value\r\n   */\n  AuthorityMetadataEntity.prototype.resetExpiresAt = function () {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  };\n  /**\r\n   * Returns whether or not the data needs to be refreshed\r\n   */\n  AuthorityMetadataEntity.prototype.isExpired = function () {\n    return this.expiresAt <= TimeUtils.nowSeconds();\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {\n    if (!entity) {\n      return false;\n    }\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n  };\n  return AuthorityMetadataEntity;\n}();\nexport { AuthorityMetadataEntity };","map":{"version":3,"sources":["../../../src/cache/entities/AuthorityMetadataEntity.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;AAOH,IAAA,uBAAA,GAAA,aAAA,YAAA;EAcI,SAAA,uBAAA,CAAA,EAAA;IACI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,UAAU,CAAA,CAAE,GAAG,4BAA4B,CAAC,oBAAoB;EAC9F;EAED;;;;AAIG;EACH,uBAAA,CAAA,SAAA,CAAA,4BAA4B,GAA5B,UAA6B,QAAgC,EAAE,WAAoB,EAAA;IAC/E,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO;IAC/B,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe;IAC/C,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB;IACnD,IAAI,CAAC,kBAAkB,GAAG,WAAW;GACxC;EAED;;;;AAIG;EACH,uBAAA,CAAA,SAAA,CAAA,sBAAsB,GAAtB,UAAuB,QAA8B,EAAE,WAAoB,EAAA;IACvE,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,sBAAsB;IAC7D,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc;IAC7C,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB;IACzD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM;IAC7B,IAAI,CAAC,oBAAoB,GAAG,WAAW;IACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ;GACpC;EAED;;;AAGG;EACH,uBAAwB,CAAA,SAAA,CAAA,wBAAA,GAAxB,UAAyB,SAAiB,EAAA;IACtC,IAAI,CAAC,mBAAmB,GAAG,SAAS;GACvC;EAED;;AAEG;EACH,uBAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,UAAU,CAAA,CAAE,GAAG,4BAA4B,CAAC,oBAAoB;GAC9F;EAED;;AAEG;EACH,uBAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACI,OAAO,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,UAAU,CAAA,CAAE;GAClD;EAED;;;AAGG;EACI,uBAAA,CAAA,yBAAyB,GAAhC,UAAiC,GAAW,EAAE,MAAc,EAAA;IAExD,IAAI,CAAC,MAAM,EAAE;MACT,OAAO,KAAK;IACf;IAED,OACI,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAC,SAAS,CAAC,KAAK,CAAC,IACzD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,IAChC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,IACxC,MAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAC1C,MAAM,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAC5C,MAAM,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAC/C,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACvC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IAC/B,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAC3C,MAAM,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAC7C,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,IAClC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC;GAExC;EACL,OAAC,uBAAA;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\r\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\r\nimport { AUTHORITY_METADATA_CONSTANTS } from \"../../utils/Constants\";\r\nimport { TimeUtils } from \"../../utils/TimeUtils\";\r\n\r\nexport class AuthorityMetadataEntity {\r\n    aliases: Array<string>;\r\n    preferred_cache: string;\r\n    preferred_network: string;\r\n    canonical_authority: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    end_session_endpoint?: string;\r\n    issuer: string;\r\n    aliasesFromNetwork: boolean;\r\n    endpointsFromNetwork: boolean;\r\n    expiresAt: number;\r\n    jwks_uri: string;\r\n\r\n    constructor() {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n\r\n    /**\r\n     * Update the entity with new aliases, preferred_cache and preferred_network values\r\n     * @param metadata \r\n     * @param fromNetwork \r\n     */\r\n    updateCloudDiscoveryMetadata(metadata: CloudDiscoveryMetadata, fromNetwork: boolean): void {\r\n        this.aliases = metadata.aliases;\r\n        this.preferred_cache = metadata.preferred_cache;\r\n        this.preferred_network = metadata.preferred_network;\r\n        this.aliasesFromNetwork = fromNetwork;\r\n    }\r\n\r\n    /**\r\n     * Update the entity with new endpoints\r\n     * @param metadata \r\n     * @param fromNetwork \r\n     */\r\n    updateEndpointMetadata(metadata: OpenIdConfigResponse, fromNetwork: boolean): void {\r\n        this.authorization_endpoint = metadata.authorization_endpoint;\r\n        this.token_endpoint = metadata.token_endpoint;\r\n        this.end_session_endpoint = metadata.end_session_endpoint;\r\n        this.issuer = metadata.issuer;\r\n        this.endpointsFromNetwork = fromNetwork;\r\n        this.jwks_uri = metadata.jwks_uri;\r\n    }\r\n\r\n    /**\r\n     * Save the authority that was used to create this cache entry\r\n     * @param authority \r\n     */\r\n    updateCanonicalAuthority(authority: string): void {\r\n        this.canonical_authority = authority;\r\n    }\r\n\r\n    /**\r\n     * Reset the exiresAt value\r\n     */\r\n    resetExpiresAt(): void {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the data needs to be refreshed\r\n     */\r\n    isExpired(): boolean {\r\n        return this.expiresAt <= TimeUtils.nowSeconds();\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAuthorityMetadataEntity(key: string, entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n            entity.hasOwnProperty(\"aliases\") &&\r\n            entity.hasOwnProperty(\"preferred_cache\") &&\r\n            entity.hasOwnProperty(\"preferred_network\") &&\r\n            entity.hasOwnProperty(\"canonical_authority\") &&\r\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n            entity.hasOwnProperty(\"token_endpoint\") &&\r\n            entity.hasOwnProperty(\"issuer\") &&\r\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n            entity.hasOwnProperty(\"expiresAt\") &&\r\n            entity.hasOwnProperty(\"jwks_uri\")\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}