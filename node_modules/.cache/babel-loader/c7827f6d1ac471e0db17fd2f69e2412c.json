{"ast":null,"code":"import axios from \"axios\";\n//import { clearLocalStorage } from \"@app/utils\";\nimport { msalInstance } from \"../index\";\nimport { loginRequest, azureAuthentication } from \"../modules/azure\";\nconst AZUREAUTHENTICATION = azureAuthentication.run();\nconst baseURL = process.env.REACT_APP_API_URL;\nconst service = axios.create({\n  baseURL\n});\nconst loginService = axios.create({\n  baseURL\n});\nconst saveToken = (access_token, refresh_token) => {\n  localStorage.setItem(\"healthbot_pwa_access_token\", access_token);\n  localStorage.setItem(\"healthbot_pwa_refresh_token\", refresh_token);\n};\n\n// const destroyToken = () => {\n//   clearLocalStorage();\n// };\n\nservice.interceptors.request.use(async config => {\n  config.headers[\"x-health-bot-app-name\"] = \"health-bot-app\";\n  const access_token = localStorage.getItem(\"health-bot_pwa_access_token\");\n  if (AZUREAUTHENTICATION) {\n    const account = msalInstance.getActiveAccount();\n    const response = await msalInstance.acquireTokenSilent({\n      ...loginRequest,\n      account: account\n      //forceRefresh: false,\n    });\n    if (response) {\n      const bearer = `Bearer ${response.accessToken}`;\n      config.headers.Authorization = bearer;\n    } else {\n      config.headers.Authorization = access_token ? `Bearer ${access_token}` : config.url.includes(\"auth\") ? \"test\" : \"\";\n    }\n  } else {\n    config.headers.Authorization = access_token ? `Bearer ${access_token}` : config.url.includes(\"auth\") ? \"test\" : \"\";\n  }\n  return config;\n});\nexport { service, loginService };","map":{"version":3,"names":["axios","msalInstance","loginRequest","azureAuthentication","AZUREAUTHENTICATION","run","baseURL","process","env","REACT_APP_API_URL","service","create","loginService","saveToken","access_token","refresh_token","localStorage","setItem","interceptors","request","use","config","headers","getItem","account","getActiveAccount","response","acquireTokenSilent","bearer","accessToken","Authorization","url","includes"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/@services/interceptor.ts"],"sourcesContent":["import axios from \"axios\";\n//import { clearLocalStorage } from \"@app/utils\";\nimport { msalInstance } from \"../index\";\nimport { loginRequest, azureAuthentication } from \"../modules/azure\";\nconst AZUREAUTHENTICATION: boolean = azureAuthentication.run();\n\nconst baseURL = process.env.REACT_APP_API_URL;\nconst service = axios.create({ baseURL });\nconst loginService = axios.create({ baseURL });\n\nconst saveToken = (access_token: any, refresh_token: any) => {\n  localStorage.setItem(\"healthbot_pwa_access_token\", access_token);\n  localStorage.setItem(\"healthbot_pwa_refresh_token\", refresh_token);\n};\n\n// const destroyToken = () => {\n//   clearLocalStorage();\n// };\n\nservice.interceptors.request.use(async (config: any) => {\n  config.headers[\"x-health-bot-app-name\"] = \"health-bot-app\";\n  const access_token = localStorage.getItem(\"health-bot_pwa_access_token\");\n\n  if (AZUREAUTHENTICATION) {\n    const account = msalInstance.getActiveAccount();\n    const response = await msalInstance.acquireTokenSilent({\n      ...loginRequest,\n      account: account,\n      //forceRefresh: false,\n    });\n    if (response) {\n      const bearer = `Bearer ${response.accessToken}`;\n      config.headers.Authorization = bearer;\n    } else {\n      config.headers.Authorization = access_token\n        ? `Bearer ${access_token}`\n        : config.url.includes(\"auth\")\n        ? \"test\"\n        : \"\";\n    }\n  } else {\n    config.headers.Authorization = access_token\n      ? `Bearer ${access_token}`\n      : config.url.includes(\"auth\")\n      ? \"test\"\n      : \"\";\n  }\n  return config;\n});\n\nexport { service, loginService };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,YAAY,QAAQ,UAAU;AACvC,SAASC,YAAY,EAAEC,mBAAmB,QAAQ,kBAAkB;AACpE,MAAMC,mBAA4B,GAAGD,mBAAmB,CAACE,GAAG,CAAC,CAAC;AAE9D,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC7C,MAAMC,OAAO,GAAGV,KAAK,CAACW,MAAM,CAAC;EAAEL;AAAQ,CAAC,CAAC;AACzC,MAAMM,YAAY,GAAGZ,KAAK,CAACW,MAAM,CAAC;EAAEL;AAAQ,CAAC,CAAC;AAE9C,MAAMO,SAAS,GAAGA,CAACC,YAAiB,EAAEC,aAAkB,KAAK;EAC3DC,YAAY,CAACC,OAAO,CAAC,4BAA4B,EAAEH,YAAY,CAAC;EAChEE,YAAY,CAACC,OAAO,CAAC,6BAA6B,EAAEF,aAAa,CAAC;AACpE,CAAC;;AAED;AACA;AACA;;AAEAL,OAAO,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAW,IAAK;EACtDA,MAAM,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAAG,gBAAgB;EAC1D,MAAMR,YAAY,GAAGE,YAAY,CAACO,OAAO,CAAC,6BAA6B,CAAC;EAExE,IAAInB,mBAAmB,EAAE;IACvB,MAAMoB,OAAO,GAAGvB,YAAY,CAACwB,gBAAgB,CAAC,CAAC;IAC/C,MAAMC,QAAQ,GAAG,MAAMzB,YAAY,CAAC0B,kBAAkB,CAAC;MACrD,GAAGzB,YAAY;MACfsB,OAAO,EAAEA;MACT;IACF,CAAC,CAAC;IACF,IAAIE,QAAQ,EAAE;MACZ,MAAME,MAAM,GAAI,UAASF,QAAQ,CAACG,WAAY,EAAC;MAC/CR,MAAM,CAACC,OAAO,CAACQ,aAAa,GAAGF,MAAM;IACvC,CAAC,MAAM;MACLP,MAAM,CAACC,OAAO,CAACQ,aAAa,GAAGhB,YAAY,GACtC,UAASA,YAAa,EAAC,GACxBO,MAAM,CAACU,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,GAC3B,MAAM,GACN,EAAE;IACR;EACF,CAAC,MAAM;IACLX,MAAM,CAACC,OAAO,CAACQ,aAAa,GAAGhB,YAAY,GACtC,UAASA,YAAa,EAAC,GACxBO,MAAM,CAACU,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,GAC3B,MAAM,GACN,EAAE;EACR;EACA,OAAOX,MAAM;AACf,CAAC,CAAC;AAEF,SAASX,OAAO,EAAEE,YAAY"},"metadata":{},"sourceType":"module"}