{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\nvar RequestValidator = /** @class */function () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    // remove empty string parameters\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\n      var value = _a[1];\n      return value !== \"\";\n    }));\n  };\n  return RequestValidator;\n}();\nexport { RequestValidator };","map":{"version":3,"sources":["../../src/request/RequestValidator.ts"],"names":[],"mappings":";;;;;;;AAAA;;;AAGG;AAOH;;AAEG;AACH,IAAA,gBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,gBAAA,CAAA,EAAA,CAoFC;EAlFG;;;AAGG;EACI,gBAAmB,CAAA,mBAAA,GAA1B,UAA2B,WAAmB,EAAA;IAC1C,IAAI,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;MAClC,MAAM,wBAAwB,CAAC,2BAA2B,CAAA,CAAE;IAC/D;GACJ;EAED;;;AAGG;EACI,gBAAc,CAAA,cAAA,GAArB,UAAsB,MAAc,EAAA;IAChC,IAAM,YAAY,GAAG,EAAE;IAEvB,KAAK,IAAM,KAAK,IAAI,WAAW,EAAE;MAC7B,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACxC;IAED,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAM,wBAAwB,CAAC,wBAAwB,CAAC,MAAM,CAAC;IAClE;GACJ;EAEM,gBAAc,CAAA,cAAA,GAArB,UAAsB,MAAc,EAAA;IAChC,IAAI;MACA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACrB,CAAA,CAAC,OAAM,CAAC,EAAE;MACP,MAAM,wBAAwB,CAAC,+BAA+B,CAAA,CAAE;IACnE;GACJ;EAED;;;;AAIG;EACI,gBAAA,CAAA,2BAA2B,GAAlC,UAAmC,aAAqB,EAAE,mBAA2B,EAAA;IACjF,IAAI,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;MAChF,MAAM,wBAAwB,CAAC,qCAAqC,CAAA,CAAE;IACzE,CAAA,MAAM;MACH,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;IACxD;GACJ;EAED;;;AAGG;EACI,gBAA2B,CAAA,2BAAA,GAAlC,UAAmC,mBAA2B,EAAA;IAC1D,IACI,CACI,yBAAyB,CAAC,KAAK,EAC/B,yBAAyB,CAAC,IAAI,CACjC,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,EACpC;MACE,MAAM,wBAAwB,CAAC,qCAAqC,CAAA,CAAE;IACzE;GACJ;EAED;;;AAGG;EACI,gBAAA,CAAA,gBAAgB,GAAvB,UAAwB,QAAoB,EAAE,WAAgC,EAAA;IAC1E,IAAI,CAAC,QAAQ,EAAE;MACX,OAAO,CAAA,CAAE;IACZ;;IAGD,WAAW,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG,EAAA;MAC3B,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;QACf,OAAO,QAAQ,CAAC,GAAG,CAAC;MACvB;IACL,CAAC,CAAC;;;IAIF,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,EAAY,EAAA;UAAN,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;MAAM,OAAA,KAAK,KAAK,EAAE;KAAA,CAAC,CAAC;GAC7F;EACL,OAAC,gBAAA;AAAD,CAAC,CAAA,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\n\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nexport class RequestValidator {\r\n\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    static validateRedirectUri(redirectUri: string) : void {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    static validatePrompt(prompt: string) : void {\r\n        const promptValues = [];\r\n\r\n        for (const value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    }\r\n\r\n    static validateClaims(claims: string) : void {\r\n        try {\r\n            JSON.parse(claims);\r\n        } catch(e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        } else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\r\n        if (\r\n            [\r\n                CodeChallengeMethodValues.PLAIN,\r\n                CodeChallengeMethodValues.S256\r\n            ].indexOf(codeChallengeMethod) < 0\r\n        ) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach((value, key) => {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n\r\n        // remove empty string parameters\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        return Object.fromEntries(Object.entries(eQParams).filter(([key, value]) => value !== \"\"));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}