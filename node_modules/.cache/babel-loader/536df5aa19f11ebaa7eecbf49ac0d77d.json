{"ast":null,"code":"import { loginRequest } from \"./authConfig\";\nimport { msalInstance } from \"../../index\";\nimport { InteractionRequiredAuthError } from \"@azure/msal-browser\";\nimport { getPatientId } from \"@app/utils\";\nexport async function callMsGraph(accessRequest = \"\") {\n  //const history: any = useHistory();\n  const account = msalInstance.getActiveAccount();\n  if (!account) {\n    throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n  }\n  var request = {\n    scopes: [process.env.REACT_APP_AZURE_SCOPES_URL],\n    loginHint: account.name\n  };\n  const response = await msalInstance.acquireTokenSilent({\n    ...loginRequest,\n    account: account\n    //forceRefresh: false,\n  }).catch(error => {\n    if (error instanceof InteractionRequiredAuthError) {\n      // fallback to interaction when silent call fails\n      //console.log(\"regenerating....\")\n      return msalInstance.acquireTokenRedirect(request);\n    }\n  });\n  const headers = new Headers();\n  const bearer = `Bearer ${response.accessToken}`;\n  headers.append(\"Authorization\", bearer);\n  if (response) {\n    localStorage.setItem(\"symptoms_analyzer_pwa_access_token\", response.accessToken);\n    if (accessRequest == \"New\") {\n      console.info(\"%cA new token has been generated, Proceeding with member re sign in.\", \"color: #494E9D; background: #494e9d21; font-size: 10px\");\n      let patientId = getPatientId();\n      if (patientId) {\n        // memberSignIn({ svassUserId: patientId }).then((response: any) => {\n        //   if (response.status == 200) {\n        //     window.location.reload()\n        //   }\n        // });\n      } else {\n        //window.location.href = `${process.env.REACT_APP_HOMEPAGE}/homescreen`\n      }\n    }\n  }\n  return response;\n}","map":{"version":3,"names":["loginRequest","msalInstance","InteractionRequiredAuthError","getPatientId","callMsGraph","accessRequest","account","getActiveAccount","Error","request","scopes","process","env","REACT_APP_AZURE_SCOPES_URL","loginHint","name","response","acquireTokenSilent","catch","error","acquireTokenRedirect","headers","Headers","bearer","accessToken","append","localStorage","setItem","console","info","patientId"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/modules/azure/graphConfig.tsx"],"sourcesContent":["import { loginRequest } from \"./authConfig\";\nimport { msalInstance } from \"../../index\";\nimport { InteractionRequiredAuthError } from \"@azure/msal-browser\";\nimport { getPatientId } from \"@app/utils\";\n\nexport async function callMsGraph(accessRequest = \"\") {\n  //const history: any = useHistory();\n  const account = msalInstance.getActiveAccount();\n  if (!account) {\n    throw Error(\n      \"No active account! Verify a user has been signed in and setActiveAccount has been called.\"\n    );\n  }\n  var request = {\n    scopes: [process.env.REACT_APP_AZURE_SCOPES_URL],\n    loginHint: account.name,\n  };\n\n  const response = await msalInstance\n    .acquireTokenSilent({\n      ...loginRequest,\n      account: account,\n      //forceRefresh: false,\n    })\n    .catch((error) => {\n      if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        //console.log(\"regenerating....\")\n        return msalInstance.acquireTokenRedirect(request);\n      }\n    });\n  const headers = new Headers();\n  const bearer = `Bearer ${response.accessToken}`;\n  headers.append(\"Authorization\", bearer);\n  if (response) {\n    localStorage.setItem(\"symptoms_analyzer_pwa_access_token\", response.accessToken);\n    if (accessRequest == \"New\") {\n      console.info(\n        \"%cA new token has been generated, Proceeding with member re sign in.\",\n        \"color: #494E9D; background: #494e9d21; font-size: 10px\"\n      );\n      let patientId = getPatientId();\n      if (patientId) {\n        // memberSignIn({ svassUserId: patientId }).then((response: any) => {\n        //   if (response.status == 200) {\n        //     window.location.reload()\n        //   }\n        // });\n      } else {\n        //window.location.href = `${process.env.REACT_APP_HOMEPAGE}/homescreen`\n      }\n    }\n  }\n  return response;\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,4BAA4B,QAAQ,qBAAqB;AAClE,SAASC,YAAY,QAAQ,YAAY;AAEzC,OAAO,eAAeC,WAAWA,CAACC,aAAa,GAAG,EAAE,EAAE;EACpD;EACA,MAAMC,OAAO,GAAGL,YAAY,CAACM,gBAAgB,CAAC,CAAC;EAC/C,IAAI,CAACD,OAAO,EAAE;IACZ,MAAME,KAAK,CACT,2FACF,CAAC;EACH;EACA,IAAIC,OAAO,GAAG;IACZC,MAAM,EAAE,CAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC;IAChDC,SAAS,EAAER,OAAO,CAACS;EACrB,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMf,YAAY,CAChCgB,kBAAkB,CAAC;IAClB,GAAGjB,YAAY;IACfM,OAAO,EAAEA;IACT;EACF,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;IAChB,IAAIA,KAAK,YAAYjB,4BAA4B,EAAE;MACjD;MACA;MACA,OAAOD,YAAY,CAACmB,oBAAoB,CAACX,OAAO,CAAC;IACnD;EACF,CAAC,CAAC;EACJ,MAAMY,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAI,UAASP,QAAQ,CAACQ,WAAY,EAAC;EAC/CH,OAAO,CAACI,MAAM,CAAC,eAAe,EAAEF,MAAM,CAAC;EACvC,IAAIP,QAAQ,EAAE;IACZU,YAAY,CAACC,OAAO,CAAC,oCAAoC,EAAEX,QAAQ,CAACQ,WAAW,CAAC;IAChF,IAAInB,aAAa,IAAI,KAAK,EAAE;MAC1BuB,OAAO,CAACC,IAAI,CACV,sEAAsE,EACtE,wDACF,CAAC;MACD,IAAIC,SAAS,GAAG3B,YAAY,CAAC,CAAC;MAC9B,IAAI2B,SAAS,EAAE;QACb;QACA;QACA;QACA;QACA;MAAA,CACD,MAAM;QACL;MAAA;IAEJ;EACF;EACA,OAAOd,QAAQ;AACjB"},"metadata":{},"sourceType":"module"}