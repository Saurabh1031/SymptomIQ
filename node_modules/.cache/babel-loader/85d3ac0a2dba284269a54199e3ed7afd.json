{"ast":null,"code":"//@ts-nocheck\nimport{useRef,useState}from\"react\";import{SearchIcon}from\"@app/assets/icons\";import{AddSymptomsButtonCont,AddSymptomsContainer,AddSymptomsHeader,Button,Container,IconDiv,Input,InputContainer,NotFoundContainer,NotFoundPara,SearchNotFound,SelectedContainer,SelectedSymptom,Suggestion,SuggestiveDiv}from\"./searchbar-components\";import NotFound from\"@app/assets/images/notfound.png\";import BlueCross from\"@app/assets/icons/blueCross\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const SearchBar=_ref=>{let{symptomsList,setSearchBarSymptoms,searchBarSymptoms,disabled,fromPage}=_ref;const[searchTerm,setSearchTerm]=useState(\"\");const[suggestions,setSuggestions]=useState([]);const[notFound,setNotFound]=useState(false);const[showAddSymptom,setShowAddSymptom]=useState(false);const inputRef=useRef(null);// const [searchBarSymptoms, setSearchBarSymptoms] = useState([]);\n// Mock data for suggestions (replace this with actual data source or API call)\n// const mockSuggestions = [\n//     \"Apple\",\n//     \"Banana\",\n//     \"Cherry\",\n//     \"Orange\",\n//     \"Pineapple\",\n//     \"Strawberry\"\n// ];\nconst mockSuggestions=symptomsList&&symptomsList.map(symptom=>symptom.value);//console.log(\"mockSuggestions: \", mockSuggestions);\n//console.log(\"searchBarSymptoms: \", searchBarSymptoms);\nconst handleSearchChange=event=>{const{value}=event.target;setSearchTerm(value);// Show suggestions only after the minimum 3 letters are input\nif(value.length>3){setNotFound(false);setShowAddSymptom(true);//setNotFound(true);\nconst filteredSuggestions=mockSuggestions.filter(suggestion=>suggestion.toLowerCase().includes(value.toLowerCase()));if(filteredSuggestions.length){setShowAddSymptom(false);// setNotFound(false);\n}setSuggestions(filteredSuggestions);}else{setShowAddSymptom(false);setNotFound(false);setSuggestions([]);}if(inputRef!==null&&inputRef!==void 0&&inputRef.current){setTimeout(()=>{inputRef.current.scrollIntoView();},100);}};const handleAddSymptom=symptomName=>{const hasOnlyLetters=/^[A-Za-z\\s]*$/.test(symptomName);const lowercaseSymptomName=symptomName.toLowerCase();if(!searchBarSymptoms.some(existingSymptom=>existingSymptom.toLowerCase()===lowercaseSymptomName)&&hasOnlyLetters){setSearchBarSymptoms(prevsearchBarSymptoms=>[...prevsearchBarSymptoms,symptomName]);}setSearchTerm(\"\");setSuggestions([]);setShowAddSymptom(false);setNotFound(false);};const handleRemoveOption=option=>{setSearchBarSymptoms(prevsearchBarSymptoms=>prevsearchBarSymptoms.filter(item=>item!==option));};const handleNoClick=()=>{setNotFound(true);setSuggestions([]);setShowAddSymptom(false);};return/*#__PURE__*/_jsxs(Container,{ref:inputRef,children:[/*#__PURE__*/_jsxs(InputContainer,{children:[/*#__PURE__*/_jsx(\"div\",{children:SearchIcon()}),/*#__PURE__*/_jsx(Input,{type:\"text\",value:searchTerm,onChange:handleSearchChange,placeholder:\"Search heartburn, stomach cramps etc.\",disabled:disabled})]}),suggestions.length&&!showAddSymptom?/*#__PURE__*/_jsx(SuggestiveDiv,{children:suggestions.map((suggestion,idx)=>/*#__PURE__*/_jsx(Suggestion,{onClick:()=>handleAddSymptom(suggestion),children:suggestion},idx))}):null,showAddSymptom&&!suggestions.length&&!notFound?/*#__PURE__*/_jsxs(AddSymptomsContainer,{children:[/*#__PURE__*/_jsxs(AddSymptomsHeader,{children:[\"This \",fromPage==\"SymptomsPage\"?\"symptom\":\"condition\",\" does not exist in the system. Do you want to add \\\"\",searchTerm,\"\\\" as a \",fromPage==\"SymptomsPage\"?\"symptom\":\"condition\",\"?\"]}),/*#__PURE__*/_jsxs(AddSymptomsButtonCont,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>handleNoClick(),children:\"No\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>handleAddSymptom(searchTerm),children:\"Yes\"})]})]}):null,notFound&&!suggestions.length&&!showAddSymptom?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(NotFoundContainer,{children:[/*#__PURE__*/_jsx(\"img\",{src:NotFound,alt:\"sorry, not found\"}),/*#__PURE__*/_jsx(SearchNotFound,{children:\"Search not found\"}),/*#__PURE__*/_jsx(NotFoundPara,{children:\"We couldn\\u2019t find what you searched for. Try again.\"})]})}):null,searchBarSymptoms.length&&!suggestions.length&&!notFound&&!showAddSymptom?/*#__PURE__*/_jsx(SelectedContainer,{children:searchBarSymptoms.map((option,idx)=>/*#__PURE__*/_jsxs(SelectedSymptom,{onClick:()=>handleRemoveOption(option),children:[option,/*#__PURE__*/_jsx(IconDiv,{children:BlueCross()})]},idx))}):null]});};export default SearchBar;","map":{"version":3,"names":["useRef","useState","SearchIcon","AddSymptomsButtonCont","AddSymptomsContainer","AddSymptomsHeader","Button","Container","IconDiv","Input","InputContainer","NotFoundContainer","NotFoundPara","SearchNotFound","SelectedContainer","SelectedSymptom","Suggestion","SuggestiveDiv","NotFound","BlueCross","jsx","_jsx","jsxs","_jsxs","SearchBar","_ref","symptomsList","setSearchBarSymptoms","searchBarSymptoms","disabled","fromPage","searchTerm","setSearchTerm","suggestions","setSuggestions","notFound","setNotFound","showAddSymptom","setShowAddSymptom","inputRef","mockSuggestions","map","symptom","value","handleSearchChange","event","target","length","filteredSuggestions","filter","suggestion","toLowerCase","includes","current","setTimeout","scrollIntoView","handleAddSymptom","symptomName","hasOnlyLetters","test","lowercaseSymptomName","some","existingSymptom","prevsearchBarSymptoms","handleRemoveOption","option","item","handleNoClick","ref","children","type","onChange","placeholder","idx","onClick","src","alt"],"sources":["/home/saurabhtiwari/Downloads/githubclone-IQ/SymptomIQ/src/components/search-bar/search-bar.tsx"],"sourcesContent":["//@ts-nocheck\nimport { useRef, useState } from \"react\";\nimport SearcIcon from \"@app/assets/icons/search-icon\";\nimport { SearchIcon } from \"@app/assets/icons\";\nimport { AddSymptomsButtonCont, AddSymptomsContainer, AddSymptomsHeader, Button, Container, IconDiv, Input, InputContainer, NotFoundContainer, NotFoundPara, SearchNotFound, SelectedContainer, SelectedSymptom, Suggestion, SuggestiveDiv } from \"./searchbar-components\";\nimport CrossSymbol from \"@app/assets/icons/cross-symbol\";\nimport NotFound from \"@app/assets/images/notfound.png\"\nimport BlueCross from \"@app/assets/icons/blueCross\";\nconst SearchBar = ({ symptomsList, setSearchBarSymptoms, searchBarSymptoms, disabled, fromPage }) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [suggestions, setSuggestions] = useState([]);\n    const [notFound, setNotFound] = useState<boolean>(false);\n    const [showAddSymptom, setShowAddSymptom] = useState<boolean>(false);\n    const inputRef = useRef(null);\n    // const [searchBarSymptoms, setSearchBarSymptoms] = useState([]);\n\n    // Mock data for suggestions (replace this with actual data source or API call)\n    // const mockSuggestions = [\n    //     \"Apple\",\n    //     \"Banana\",\n    //     \"Cherry\",\n    //     \"Orange\",\n    //     \"Pineapple\",\n    //     \"Strawberry\"\n    // ];\n    const mockSuggestions = symptomsList && symptomsList.map((symptom) => (symptom.value));\n\n    //console.log(\"mockSuggestions: \", mockSuggestions);\n    //console.log(\"searchBarSymptoms: \", searchBarSymptoms);\n    const handleSearchChange = (event) => {\n        const { value } = event.target;\n        setSearchTerm(value);\n\n        // Show suggestions only after the minimum 3 letters are input\n        if (value.length > 3) {\n            setNotFound(false);\n            setShowAddSymptom(true);\n            //setNotFound(true);\n            const filteredSuggestions = mockSuggestions.filter((suggestion) =>\n                suggestion.toLowerCase().includes(value.toLowerCase())\n            );\n            if (filteredSuggestions.length) {\n                setShowAddSymptom(false);\n                // setNotFound(false);\n            }\n            setSuggestions(filteredSuggestions);\n        } else {\n            setShowAddSymptom(false);\n            setNotFound(false);\n            setSuggestions([]);\n        }\n        if (inputRef?.current) {\n            setTimeout(() => {\n                inputRef.current.scrollIntoView();\n            }, 100)\n        }\n    };\n    const handleAddSymptom = (symptomName: any) => {\n        const hasOnlyLetters = /^[A-Za-z\\s]*$/.test(symptomName);\n        const lowercaseSymptomName = symptomName.toLowerCase();\n        if (!searchBarSymptoms.some(existingSymptom => existingSymptom.toLowerCase() === lowercaseSymptomName) && hasOnlyLetters) {\n            setSearchBarSymptoms((prevsearchBarSymptoms) => [\n                ...prevsearchBarSymptoms,\n                symptomName\n            ]);\n        }\n        setSearchTerm(\"\");\n        setSuggestions([]);\n        setShowAddSymptom(false);\n        setNotFound(false);\n    };\n\n    const handleRemoveOption = (option) => {\n        setSearchBarSymptoms((prevsearchBarSymptoms) =>\n            prevsearchBarSymptoms.filter((item) => item !== option)\n        );\n    };\n    const handleNoClick = () => {\n        setNotFound(true);\n        setSuggestions([]);\n        setShowAddSymptom(false);\n    }\n\n    return (\n        <Container ref={inputRef}>\n            <InputContainer>\n                <div>{SearchIcon()}</div>\n                <Input\n                    type=\"text\"\n                    value={searchTerm}\n                    onChange={handleSearchChange}\n                    placeholder=\"Search heartburn, stomach cramps etc.\"\n                    disabled={disabled}\n                />\n            </InputContainer>\n            {(suggestions.length && !showAddSymptom) ?\n                <SuggestiveDiv>\n                    {suggestions.map((suggestion, idx) => (\n                        <Suggestion key={idx} onClick={() => handleAddSymptom(suggestion)}>\n                            {suggestion}\n                        </Suggestion>\n                    ))}\n                </SuggestiveDiv> : null}\n            {(showAddSymptom && !suggestions.length && !notFound) ?\n                <AddSymptomsContainer>\n                    <AddSymptomsHeader>\n                        This {fromPage == \"SymptomsPage\" ? \"symptom\" : \"condition\"} does not exist in the system. Do you want to add \"{searchTerm}\" as a {fromPage == \"SymptomsPage\" ? \"symptom\" : \"condition\"}?\n                    </AddSymptomsHeader>\n                    <AddSymptomsButtonCont>\n                        <Button onClick={() => handleNoClick()}>No</Button>\n                        <Button onClick={() => handleAddSymptom(searchTerm)}>Yes</Button>\n                    </AddSymptomsButtonCont>\n                </AddSymptomsContainer> : null}\n            {(notFound && !suggestions.length && !showAddSymptom) ?\n                <div>\n                    <NotFoundContainer>\n                        <img src={NotFound} alt=\"sorry, not found\" />\n                        <SearchNotFound>Search not found</SearchNotFound>\n                        <NotFoundPara>We couldn’t find what you searched for. Try again.</NotFoundPara>\n                    </NotFoundContainer>\n                </div> : null}\n            {(searchBarSymptoms.length && !suggestions.length && !notFound && !showAddSymptom) ?\n                <SelectedContainer>\n                    {searchBarSymptoms.map((option, idx) => (\n                        <SelectedSymptom key={idx} onClick={() => handleRemoveOption(option)}>\n                            {option}\n                            <IconDiv>\n                                {BlueCross()}\n                            </IconDiv>\n                        </SelectedSymptom>\n                    ))}\n                </SelectedContainer> : null}\n        </Container>\n    );\n};\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}