{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { PerformanceEvents, AuthError, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentRefreshClient = /** @class */function (_super) {\n  __extends(SilentRefreshClient, _super);\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            _a = [__assign({}, request)];\n            return [4 /*yield*/, this.initializeBaseRequest(request, request.account)];\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\");\n            // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache,\n                requestId: result.requestId\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n          case 1:\n            clientConfig = _a.sent();\n            return [2 /*return*/, new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  return SilentRefreshClient;\n}(StandardInteractionClient);\nexport { SilentRefreshClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentRefreshClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentRefreshClient extends StandardInteractionClient {\r\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request, request.account)\r\n        };\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Refresh token client created\");\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\r\n            .then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: result.fromCache,\r\n                    requestId: result.requestId\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((e: AuthError) => {\r\n                if (e instanceof AuthError) {\r\n                    (e as AuthError).setCorrelationId(this.correlationId);\r\n                }\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    errorCode: e.errorCode,\r\n                    subErrorCode: e.subError,\r\n                    success: false\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}