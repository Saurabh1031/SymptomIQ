{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nvar CryptoOps = /** @class */function () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n          case 1:\n            keyPair = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4 /*yield*/, this.hashString(publicJwkString)];\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n          case 5:\n            unextractablePrivateKey = _b.sent();\n            // Store Keypair data in keystore\n            return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\n          case 2:\n            keyFound = _a.sent();\n            return [2 /*return*/, !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.clear()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\n          case 1:\n            cachedKeyPair = _b.sent();\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n            // Generate payload\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\nexport { CryptoOps };","map":{"version":3,"sources":["../../src/crypto/CryptoOps.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, IPerformanceClient, JoseHeader, Logger, PerformanceEvents, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { Base64Decode } from \"../encode/Base64Decode\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { CryptoKeyStore } from \"../cache/CryptoKeyStore\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\n\r\nexport type CachedKeyPair = {\r\n    publicKey: CryptoKey,\r\n    privateKey: CryptoKey,\r\n    requestMethod?: string,\r\n    requestUri?: string\r\n};\r\n\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nexport class CryptoOps implements ICrypto {\r\n\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n    private b64Encode: Base64Encode;\r\n    private b64Decode: Base64Decode;\r\n    private pkceGenerator: PkceGenerator;\r\n    private logger: Logger;\r\n\r\n    /**\r\n     * CryptoOps can be used in contexts outside a PCA instance,\r\n     * meaning there won't be a performance manager available.\r\n     */\r\n    private performanceClient: IPerformanceClient | undefined;\r\n\r\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\r\n    private static EXTRACTABLE: boolean = true;\r\n    private cache: CryptoKeyStore;\r\n\r\n    constructor(logger: Logger, performanceClient?: IPerformanceClient, cryptoConfig?: CryptoOptions) {\r\n        this.logger = logger;\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new CryptoKeyStore(this.logger);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input \r\n     */\r\n    base64Encode(input: string): string {\r\n        return this.b64Encode.encode(input);\r\n    }    \r\n    \r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input \r\n     */\r\n    base64Decode(input: string): string {\r\n        return this.b64Decode.decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generateCodes();\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\r\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\r\n\r\n        // Generate Keypair\r\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\r\n\r\n        // Generate Thumbprint for Public Key\r\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\r\n        \r\n        const pubKeyThumprintObj: JsonWebKey = {\r\n            e: publicKeyJwk.e,\r\n            kty: publicKeyJwk.kty,\r\n            n: publicKeyJwk.n\r\n        };\r\n        \r\n        const publicJwkString: string = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\r\n        const publicJwkHash = await this.hashString(publicJwkString);\r\n\r\n        // Generate Thumbprint for Private Key\r\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\r\n        // Re-import private key to make it unextractable\r\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\r\n\r\n        // Store Keypair data in keystore\r\n        await this.cache.asymmetricKeys.setItem(\r\n            publicJwkHash, \r\n            {\r\n                privateKey: unextractablePrivateKey,\r\n                publicKey: keyPair.publicKey,\r\n                requestMethod: request.resourceRequestMethod,\r\n                requestUri: request.resourceRequestUri\r\n            }\r\n        );\r\n\r\n        if (publicKeyThumbMeasurement) {\r\n            publicKeyThumbMeasurement.endMeasurement({\r\n                success: true\r\n            });\r\n        }\r\n\r\n        return publicJwkHash;\r\n    }\r\n\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid \r\n     */\r\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\r\n        await this.cache.asymmetricKeys.removeItem(kid);\r\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\r\n        return !keyFound;\r\n    }\r\n\r\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */\r\n    async clearKeystore(): Promise<boolean> {\r\n        return await this.cache.clear();\r\n    }\r\n\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload \r\n     * @param kid \r\n     */\r\n    async signJwt(payload: SignedHttpRequest, kid: string, correlationId?: string): Promise<string> {\r\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\r\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\r\n        \r\n        if (!cachedKeyPair) {\r\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\r\n        }\r\n\r\n        // Get public key as JWK\r\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\r\n        const publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\r\n\r\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\r\n        const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\r\n        \r\n        // Generate header\r\n        const shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\r\n        const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\r\n\r\n        // Generate payload\r\n        payload.cnf = {\r\n            jwk: JSON.parse(publicKeyJwkString)\r\n        };\r\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n\r\n        // Form token string\r\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\r\n\r\n        // Sign token\r\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\r\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n\r\n        const signedJwt = `${tokenString}.${encodedSignature}`;\r\n\r\n        if (signJwtMeasurement) {\r\n            signJwtMeasurement.endMeasurement({\r\n                success: true\r\n            });\r\n        }\r\n\r\n        return signedJwt;\r\n    }\r\n\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */\r\n    async hashString(plainText: string): Promise<string> {\r\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\r\n        const hashBytes = new Uint8Array(hashBuffer);\r\n        return this.b64Encode.urlEncodeArr(hashBytes);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}