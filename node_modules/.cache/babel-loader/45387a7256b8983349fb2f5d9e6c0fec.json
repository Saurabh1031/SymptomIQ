{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 client credential grant\r\n */\nvar ClientCredentialClient = /** @class */function (_super) {\n  __extends(ClientCredentialClient, _super);\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3 /*break*/, 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3 /*break*/, 4];\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n          case 5:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    // Use clientAssertion from request, fallback to client assertion in base configuration\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return ClientCredentialClient;\n}(BaseClient);\nexport { ClientCredentialClient };","map":{"version":3,"sources":["../../src/client/ClientCredentialClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType , CredentialType, CacheOutcome, Constants, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\r\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { IAppTokenProvider } from \"../config/AppTokenProvider\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nexport class ClientCredentialClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n    private readonly appTokenProvider?: IAppTokenProvider;\r\n\r\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider) {\r\n        super(configuration);\r\n        this.appTokenProvider = appTokenProvider;\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        \r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n\r\n        if (!cachedAccessToken) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return null;\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: Constants.EMPTY_STRING,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\r\n        };\r\n\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        } else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n        \r\n        let serverTokenResponse: ServerAuthorizationTokenResponse;\r\n        let reqTimestamp: number;\r\n\r\n        if (this.appTokenProvider) {\r\n            this.logger.info(\"Using appTokenProvider extensibility.\");\r\n\r\n            const appTokenPropviderParameters = {\r\n                correlationId: request.correlationId,\r\n                tenantId: this.config.authOptions.authority.tenant,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n            };\r\n\r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\r\n\r\n            serverTokenResponse = {\r\n                access_token: appTokenProviderResult.accessToken, \r\n                expires_in: appTokenProviderResult.expiresInSeconds,\r\n                refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                token_type : AuthenticationScheme.BEARER\r\n            };\r\n        } else {\r\n            const queryParametersString = this.createTokenQueryParameters(request);\r\n            const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n            const requestBody = this.createTokenRequestBody(request);\r\n            const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid\r\n            };\r\n    \r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n            serverTokenResponse = response.body;\r\n        }\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(serverTokenResponse);\r\n       \r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            serverTokenResponse,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\r\n\r\n        if (clientAssertion) {\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}