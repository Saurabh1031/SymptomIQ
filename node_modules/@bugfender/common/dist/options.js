"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.removeUndefinedProperties = exports.prepareOptions = void 0;
/**
 * - Clone
 * - Remove undefined properties
 * - Remove empty string options for: `build`, `version`
 *
 * @internal
 * @param options User provided options object
 * @returns Processed options object
 */
function prepareOptions(options) {
    options = __assign({}, options); // Clone options to avoid user provided object mutation
    removeUndefinedProperties(options);
    removeEmptyStringOptions(options, ['build', 'version']);
    return options;
}
exports.prepareOptions = prepareOptions;
/**
 * Removes `undefined` properties from an object
 * @internal
 * @param object Object to clean-up
 */
function removeUndefinedProperties(object) {
    Object.entries(object).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (typeof value === 'undefined') {
            delete object[key];
        }
    });
}
exports.removeUndefinedProperties = removeUndefinedProperties;
function removeEmptyStringOptions(options, props) {
    props.forEach(function (opt) {
        var option = options[opt];
        if (typeof option === 'string') {
            if (option.trim() === '') {
                delete options[opt];
            }
        }
    });
}
/**
 * @internal
 */
function validate(options, rules) {
    var urlValidator = new RegExp(/^http(s)?:\/\//i);
    Object.entries(rules).forEach(function (_a) {
        var key = _a[0], rules = _a[1];
        var value = options[key];
        rules.forEach(function (rule) {
            if (rule === 'required') {
                if (typeof value === 'undefined') {
                    throw new Error("Bugfender requires '".concat(key, "' option to initialize."));
                }
            }
            else if (rule === 'string') {
                if (!['string', 'undefined'].includes(typeof value)) {
                    throw new Error("'".concat(key, "' option must be a string."));
                }
            }
            else if (rule === 'url') {
                if (typeof value !== 'undefined' && !urlValidator.test(value)) {
                    throw new Error("'".concat(key, "' option must be a valid URL."));
                }
            }
            else if (rule === 'boolean') {
                if (!['boolean', 'undefined'].includes(typeof value)) {
                    throw new Error("'".concat(key, "' option must be a boolean."));
                }
            }
        });
    });
}
exports.validate = validate;
