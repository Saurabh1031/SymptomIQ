"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterEventsHandlerBase = void 0;
var RegisterEventsHandlerBase = /** @class */ (function () {
    function RegisterEventsHandlerBase(bugfender, window) {
        this.bugfender = bugfender;
        this.window = window;
    }
    RegisterEventsHandlerBase.prototype.addJsEventLogEntry = function (event) {
        var log = {
            tag: "js_event",
            text: JSON.stringify(event),
            url: this.getURL(),
        };
        this.bugfender.sendLog(log);
    };
    RegisterEventsHandlerBase.prototype.getURL = function () {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.href) !== null && _c !== void 0 ? _c : "";
    };
    /**
     * Safely detecting passive events support
     * See: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#safely_detecting_option_support
     */
    RegisterEventsHandlerBase.prototype.supportsPassiveEvents = function () {
        var passiveSupported = false;
        try {
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            var noop = function () { };
            var options = {
                get passive() {
                    passiveSupported = true;
                    return false;
                },
            };
            this.window.addEventListener("offline", noop, options);
            this.window.removeEventListener("offline", noop, false);
        }
        catch (err) {
            passiveSupported = false;
        }
        return passiveSupported;
    };
    return RegisterEventsHandlerBase;
}());
exports.RegisterEventsHandlerBase = RegisterEventsHandlerBase;
