"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatLogEntryText = exports.format = void 0;
var util_1 = require("./browserify-node-util/util");
var type_mappers_1 = require("./type-mappers");
/**
 * @internal
 */
function format(parameters) {
    var textParams = parameters.slice(1);
    var textFormat = parameters[0];
    var text;
    try {
        // Our sanitizer gives better results, try with it first
        textFormat = (0, type_mappers_1.mapToString)(textFormat);
    }
    catch (_a) {
        // Fallback to `format`
        textFormat = (0, util_1.format)(textFormat);
    }
    if (textParams.length > 0) {
        text = util_1.format.apply(void 0, __spreadArray([textFormat], textParams, false));
    }
    else {
        text = textFormat;
    }
    return text;
}
exports.format = format;
/**
 * Format `LogEntry.text`
 *
 * @internal
 * @param value `LogEntry.text` value
 */
function formatLogEntryText(value) {
    if (typeof value === 'string') {
        return value;
    }
    else if (isUnknownArray(value)) {
        return format(value);
    }
    return '';
}
exports.formatLogEntryText = formatLogEntryText;
/**
 * Type predicate to narrow down to `unknown[]`. If `Array.isArray` is
 * used directly, that narrows to `any[]`.
 *
 * This is a helper for `formatLogEntryText()`.
 */
function isUnknownArray(value) {
    return Array.isArray(value);
}
