/*! For license information please see storage-processor.js.LICENSE.txt */
!function(e,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define([],s):"object"==typeof exports?exports["@bugfender/sdk"]=s():e["@bugfender/sdk"]=s()}(self,(()=>(()=>{"use strict";var e={};return{3103:function(e,s){var i=this&&this.__awaiter||function(e,s,i,t){return new(i||(i=Promise))((function(n,o){function r(e){try{h(t.next(e))}catch(e){o(e)}}function d(e){try{h(t.throw(e))}catch(e){o(e)}}function h(e){var s;e.done?n(e.value):(s=e.value,s instanceof i?s:new i((function(e){e(s)}))).then(r,d)}h((t=t.apply(e,s||[])).next())}))};Object.defineProperty(s,"__esModule",{value:!0}),s.StorageProcessor=void 0,s.StorageProcessor=class{constructor(e,s,i,t,n,o,r,d,h,c,u,a){this.api=e,this.channel=s,this.connection=i,this.logger=t,this.device=n,this.deviceKeysTable=o,this.issuesTable=r,this.logsTable=d,this.options=h,this.sessionFactory=c,this.sessionsTable=u,this.storageGuard=a,this.BATCH_SIZE=500,this.runIntervalMs=15e3,this.forceSend=!1,this.isRunning=!1,setInterval(this.run.bind(this),this.runIntervalMs),this.channel.onHasBecomeLeader().then((()=>{this.run()})),this.channel.onForceSend((()=>{this.forceSend=!0}))}cleanupSessions(e){return i(this,void 0,void 0,(function*(){for(const s of e){const e=yield this.channel.isSessionActive(s.uuid),i=yield this.hasData(s);if(!e&&!i)try{yield this.sessionsTable.delete(s.uuid)}catch(e){}}}))}hasData(e){return i(this,void 0,void 0,(function*(){try{const[s,i,t]=yield Promise.all([this.logsTable.count(e.uuid),this.issuesTable.count(e.uuid),this.deviceKeysTable.count(e.uuid)]);return s>0||i>0||t>0}catch(e){return!0}}))}registerSession(e){return i(this,void 0,void 0,(function*(){if(!e.id){const s=this.sessionFactory.create(e.uuid,this.options),{id:i}=yield this.api.sendSession(s);e.id=i,this.sessionsTable.update(e.uuid,{id:i})}return e}))}canRun(){return this.connection.isOnline()&&this.channel.isLeader()&&!this.isRunning}run(){return i(this,void 0,void 0,(function*(){const e=this.canRun();if(this.logger.log("Processing...",{forceSend:this.forceSend,isRunning:this.isRunning,isLeader:this.channel.isLeader(),isOnline:this.connection.isOnline(),canRun:e}),!e)return void this.logger.log("Aborted.");this.isRunning=!0;const s=this.forceSend,i=yield this.sessionsTable.getAll(),t=[],n=this.storageGuard.canProcess()||this.forceSend;let o=!1;this.logger.log("Should process device: "+(n?"Yes":"No")),this.logger.log(`${i.length} session/s found`),i.sort(((e,s)=>Number(!!s.id)-Number(!!e.id)));for(const e of i){const s=yield this.registerSession(e),i=yield this.sendIssues(s);o=o||i,i||n?(t.push(this.sendLogs(s)),this.logger.log(`Session processed. ID: ${s.id}`,{sessionHasIssues:i})):this.logger.log(`Session skipped. ID: ${s.id}`)}(o||n)&&t.push(this.sendDeviceData()),yield Promise.all(t),yield this.cleanupSessions(i),this.isRunning=!1,s&&(this.forceSend=!1),this.logger.log("Done")}))}sendDeviceData(){return i(this,void 0,void 0,(function*(){try{const e={},s=yield this.deviceKeysTable.getAll();s.forEach((s=>{e[s.data.key]=s.data.value})),s.length&&(yield Promise.all(Object.entries(e).map((([e,s])=>this.api.setDeviceKey(this.device.getUDID(),e,s)))),yield this.deviceKeysTable.deleteBatch(s.length))}catch(e){this.logger.error("sendDeviceData error",e)}}))}sendIssues(e){return i(this,void 0,void 0,(function*(){try{const s=yield this.issuesTable.getBatch(e.uuid,this.BATCH_SIZE);for(const i of s){const s=i.data,t=`${this.options.baseURL}/intent/${this.options.appID}/issue/${s.uuid}`;yield this.api.sendIssue(s.uuid,t,s.title,s.text,s.type,e.id),yield this.issuesTable.deleteById(i.id)}return s.length>0}catch(e){return this.logger.error("sendIssues error",e),!1}}))}sendLogs(e){return i(this,void 0,void 0,(function*(){try{const s=(yield this.logsTable.getBatch(e.uuid,this.BATCH_SIZE)).map((e=>e.data));s.length&&(yield this.api.sendLogs(e.id,s),yield this.logsTable.deleteBatch(e.uuid,s.length))}catch(e){this.logger.error("sendLogs error",e)}}))}}}}[3103](0,e),e})()));
//# sourceMappingURL=storage-processor.js.map