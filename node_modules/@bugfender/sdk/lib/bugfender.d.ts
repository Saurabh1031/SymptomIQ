import { BugfenderFacade, DeviceKeyValue, LogEntry, LogLevel, UserFeedbackOptions, UserFeedbackResult, SDKOptions } from '@bugfender/common';
import { ISDKPrivateOptions } from './types/sdk-options';
import { MainProvider } from './providers/main.provider';
import { IPreInitProvider } from './providers/pre-init.provider';
import { StorageProcessor } from './storage-processor';
export declare class Bugfender implements BugfenderFacade {
    private readonly preInitProvider;
    private readonly sdkUserAgent;
    private readonly version;
    LogLevel: typeof LogLevel;
    private readonly initDeferred;
    private readonly commands;
    protected options: ISDKPrivateOptions;
    protected processor: StorageProcessor;
    protected provider: MainProvider;
    constructor(preInitProvider: IPreInitProvider, sdkUserAgent: string, version: number);
    init(options: SDKOptions): Promise<void>;
    forceSendOnce(): void;
    getDeviceURL(): Promise<string>;
    getSessionURL(): Promise<string>;
    getUserFeedback(options?: UserFeedbackOptions): Promise<UserFeedbackResult>;
    log(obj: unknown, ...objs: unknown[]): void;
    log(msg: string, ...subst: unknown[]): void;
    warn(obj: unknown, ...objs: unknown[]): void;
    warn(msg: string, ...subst: unknown[]): void;
    error(obj: unknown, ...objs: unknown[]): void;
    error(msg: string, ...subst: unknown[]): void;
    trace(obj: unknown, ...objs: unknown[]): void;
    trace(msg: string, ...subst: unknown[]): void;
    info(obj: unknown, ...objs: unknown[]): void;
    info(msg: string, ...subst: unknown[]): void;
    fatal(obj: unknown, ...objs: unknown[]): void;
    fatal(msg: string, ...subst: unknown[]): void;
    removeDeviceKey(key: string): void;
    sendLog(log: LogEntry): void;
    sendIssue(title: string, text: string): Promise<string>;
    sendCrash(title: string, text: string): Promise<string>;
    sendUserFeedback(title: string, text: string): Promise<string>;
    setDeviceKey(key: string, value: DeviceKeyValue): void;
    setForceEnabled(state: boolean): void;
}
