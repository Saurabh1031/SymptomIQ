import { IApiClient } from './api-client';
import { IChannel } from './channel';
import { Connection } from './connection';
import { IDevice } from './device';
import { ISDKPrivateOptions } from './types/sdk-options';
import { SessionFactory } from './session-factory';
import { IRegisteredSessionDBEntry, ISessionDBEntry, ISessionsTable } from './data/sessions.table';
import { IDeviceKeysTable } from './data/device-keys.table';
import { IIssuesTable } from './data/issues.table';
import { ILogsTable } from './data/logs.table';
import { IStorageGuard } from './storage-guard';
import { ILogger } from './logger';
export declare class StorageProcessor {
    protected api: IApiClient;
    protected channel: IChannel;
    protected connection: Connection;
    protected logger: ILogger;
    protected device: IDevice;
    protected deviceKeysTable: IDeviceKeysTable;
    protected issuesTable: IIssuesTable;
    protected logsTable: ILogsTable;
    protected options: ISDKPrivateOptions;
    protected sessionFactory: SessionFactory;
    protected sessionsTable: ISessionsTable;
    protected storageGuard: IStorageGuard;
    protected readonly BATCH_SIZE = 500;
    protected readonly runIntervalMs = 15000;
    protected forceSend: boolean;
    protected isRunning: boolean;
    constructor(api: IApiClient, channel: IChannel, connection: Connection, logger: ILogger, device: IDevice, deviceKeysTable: IDeviceKeysTable, issuesTable: IIssuesTable, logsTable: ILogsTable, options: ISDKPrivateOptions, sessionFactory: SessionFactory, sessionsTable: ISessionsTable, storageGuard: IStorageGuard);
    protected cleanupSessions(sessions: ISessionDBEntry[]): Promise<void>;
    protected hasData(session: ISessionDBEntry): Promise<boolean>;
    protected registerSession(sessionIDB: ISessionDBEntry): Promise<IRegisteredSessionDBEntry>;
    protected canRun(): boolean;
    run(): Promise<void>;
    protected sendDeviceData(): Promise<void>;
    protected sendIssues(session: IRegisteredSessionDBEntry): Promise<boolean>;
    protected sendLogs(session: IRegisteredSessionDBEntry): Promise<void>;
}
