import { LogEntryShort } from '@bugfender/common';
import { LogFactory } from '../log-factory';
import { Table } from './table';
export interface ILogDBEntry {
    id: number;
    sessionUUID: string;
    data: LogEntryShort;
}
export type ILogDBAddEntry = Omit<ILogDBEntry, 'id'>;
export interface ILogsTable {
    add(item: ILogDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(sessionUUID: string, batchSize: number): Promise<void>;
    deleteOldLogs(sessionUUID: string): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<ILogDBEntry[]>;
}
export declare class IDBLogsTable implements ILogsTable {
    protected table: Table<ILogDBAddEntry, ILogDBEntry>;
    protected logFactory: LogFactory;
    constructor(table: Table<ILogDBAddEntry, ILogDBEntry>, logFactory: LogFactory);
    add(item: ILogDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(sessionUUID: string, batchSize: number): Promise<void>;
    deleteOldLogs(sessionUUID: string, batchSize?: number): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<ILogDBEntry[]>;
}
export declare class InMemoryLogsTable implements ILogsTable {
    private readonly logFactory;
    private readonly storageLimit;
    private data;
    private idCounter;
    constructor(logFactory: LogFactory, storageLimit: number);
    private getNextID;
    add(item: ILogDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(sessionUUID: string, batchSize: number): Promise<void>;
    deleteOldLogs(_sessionUUID: string): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<ILogDBEntry[]>;
}
