import { NullableDeviceKeyValue } from '../types/device';
import { Table } from './table';
export interface IDeviceKeyDBEntry {
    id: number;
    sessionUUID: string;
    data: {
        key: string;
        value: NullableDeviceKeyValue;
    };
}
export type IDeviceKeyDBAddEntry = Omit<IDeviceKeyDBEntry, 'id'>;
export interface IDeviceKeysTable {
    add(item: IDeviceKeyDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(limit: number): Promise<void>;
    getAll(): Promise<IDeviceKeyDBEntry[]>;
}
export declare class IDBDeviceKeysTable implements IDeviceKeysTable {
    protected table: Table<IDeviceKeyDBAddEntry, IDeviceKeyDBEntry>;
    constructor(table: Table<IDeviceKeyDBAddEntry, IDeviceKeyDBEntry>);
    add(item: IDeviceKeyDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(batchSize: number): Promise<void>;
    getAll(): Promise<IDeviceKeyDBEntry[]>;
}
export declare class InMemoryDeviceKeysTable implements IDeviceKeysTable {
    private data;
    private idCounter;
    private getNextID;
    add(item: IDeviceKeyDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteBatch(batchSize: number): Promise<void>;
    getAll(): Promise<IDeviceKeyDBEntry[]>;
}
