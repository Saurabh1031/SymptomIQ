import { Table } from './table';
export interface ISessionDBEntry {
    uuid: string;
    udid: string;
    id?: number;
}
export type IRegisteredSessionDBEntry = Required<ISessionDBEntry>;
export type ISessionDBAddEntry = Omit<ISessionDBEntry, 'id'>;
export interface ISessionsTable {
    addIfMissing(item: ISessionDBAddEntry): Promise<void>;
    delete(uuid: string): Promise<void>;
    getAll(): Promise<ISessionDBEntry[]>;
    update(uuid: string, data: Partial<ISessionDBEntry>): Promise<void>;
}
export declare class IDBSessionsTable implements ISessionsTable {
    protected table: Table<ISessionDBAddEntry, ISessionDBEntry>;
    constructor(table: Table<ISessionDBAddEntry, ISessionDBEntry>);
    addIfMissing(item: ISessionDBAddEntry): Promise<void>;
    delete(uuid: string): Promise<void>;
    getAll(): Promise<ISessionDBEntry[]>;
    update(uuid: string, data: Partial<ISessionDBEntry>): Promise<void>;
}
export declare class InMemorySessionsTable implements ISessionsTable {
    private data;
    addIfMissing(item: ISessionDBAddEntry): Promise<void>;
    delete(uuid: string): Promise<void>;
    getAll(): Promise<ISessionDBEntry[]>;
    update(uuid: string, data: Partial<ISessionDBEntry>): Promise<void>;
}
