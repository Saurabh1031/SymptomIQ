import { IssueType } from '../types/issue';
import { Table } from './table';
export interface IIssueDBEntry {
    id: number;
    sessionUUID: string;
    data: {
        title: string;
        text: string;
        type: IssueType;
        uuid: string;
    };
}
export type IIssueDBAddEntry = Omit<IIssueDBEntry, 'id'>;
export interface IIssuesTable {
    add(item: IIssueDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteById(id: number): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<IIssueDBEntry[]>;
}
export declare class IDBIssuesTable implements IIssuesTable {
    protected table: Table<IIssueDBAddEntry, IIssueDBEntry>;
    constructor(table: Table<IIssueDBAddEntry, IIssueDBEntry>);
    add(item: IIssueDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteById(id: number): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<IIssueDBEntry[]>;
}
export declare class InMemoryIssuesTable implements IIssuesTable {
    private data;
    private idCounter;
    private getNextID;
    add(item: IIssueDBAddEntry): Promise<void>;
    count(sessionUUID: string): Promise<number>;
    deleteById(id: number): Promise<void>;
    getBatch(sessionUUID: string, batchSize: number): Promise<IIssueDBEntry[]>;
}
