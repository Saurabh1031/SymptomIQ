import { BroadcastChannel, LeaderElector } from 'broadcast-channel';
import { ICurrentSession } from './current-session';
import { ILogger } from './logger';
export declare enum MessageType {
    ForceSend = "force-send",
    Ping = "ping",
    Pong = "pong"
}
interface MessageForceSend {
    type: MessageType.ForceSend;
}
interface MessagePing {
    type: MessageType.Ping;
    fromSessionUUID: string;
    toSessionUUID: string;
}
interface MessagePong {
    type: MessageType.Pong;
    fromSessionUUID: string;
    toSessionUUID: string;
}
export type Message = MessageForceSend | MessagePing | MessagePong;
interface SessionsStatus {
    [id: string]: boolean;
}
type Callback = () => void;
export interface IChannel {
    isLeader(): boolean;
    isSessionActive(sessionUUID: string): Promise<boolean>;
    setCurrentSession(session: ICurrentSession): void;
    notifyForceSend(): void;
    onForceSend(cb: Callback): void;
    onHasBecomeLeader(): Promise<void>;
}
export declare function createBroadcastChannel(): BroadcastChannel<Message>;
export declare class Channel implements IChannel {
    protected channel: BroadcastChannel<Message>;
    protected logger: ILogger;
    protected elector: LeaderElector;
    protected leader: boolean;
    protected leaderPromise: Promise<void>;
    protected onForceSendCb: Callback;
    protected sessionsStatus: SessionsStatus;
    protected session?: ICurrentSession;
    constructor(channel: BroadcastChannel<Message>, logger: ILogger);
    setCurrentSession(session: ICurrentSession): void;
    protected handleMessage(msg: Message): void;
    isLeader(): boolean;
    notifyForceSend(): void;
    onForceSend(cb: Callback): void;
    onHasBecomeLeader(): Promise<void>;
    isSessionActive(sessionUUID: string): Promise<boolean>;
}
export declare class MonoChannel implements IChannel {
    private onForceSendCb;
    private leaderPromise;
    private session?;
    setCurrentSession(session: ICurrentSession): void;
    isLeader(): boolean;
    isSessionActive(sessionUUID: string): Promise<boolean>;
    notifyForceSend(): void;
    onForceSend(cb: Callback): void;
    onHasBecomeLeader(): Promise<void>;
}
export {};
