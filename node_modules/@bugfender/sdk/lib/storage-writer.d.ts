import { LogEntry } from '@bugfender/common';
import { IDeviceKeysTable } from './data/device-keys.table';
import { IIssuesTable } from './data/issues.table';
import { ILogDBAddEntry, ILogsTable } from './data/logs.table';
import { LogFactory } from './log-factory';
import { Time } from './timer';
import { NullableDeviceKeyValue } from './types/device';
import { ICallInfo } from './types/error';
import { IssueType } from './types/issue';
import { ISDKPrivateOptions } from './types/sdk-options';
export interface StorageWriterMessageDeviceKey {
    type: 'device-key';
    data: {
        key: string;
        value: NullableDeviceKeyValue;
        callInfo: ICallInfo;
        time: Time;
    };
}
export interface StorageWriterMessageInit {
    type: 'init';
    data: {
        options: ISDKPrivateOptions;
        sessionUUID: string;
    };
}
export interface StorageWriterMessageIssue {
    type: 'issue';
    data: {
        type: IssueType;
        title: string;
        text: string;
        callInfo: ICallInfo;
        uuid: string;
        time: Time;
    };
}
export interface LogEntryString extends LogEntry {
    text?: string;
}
export interface StorageWriterMessageLogEntry {
    type: 'log-entry';
    data: {
        log: LogEntryString;
        callInfo: ICallInfo;
        time: Time;
    };
}
export type StorageWriterMessage = StorageWriterMessageDeviceKey | StorageWriterMessageInit | StorageWriterMessageIssue | StorageWriterMessageLogEntry;
export declare class StorageWriter {
    protected deviceKeysTable: IDeviceKeysTable;
    protected issuesTable: IIssuesTable;
    protected logFactory: LogFactory;
    protected logsTable: ILogsTable;
    protected isClearingSpace: boolean;
    protected logsQueue: ILogDBAddEntry[];
    protected options: ISDKPrivateOptions;
    protected sessionUUID: string;
    constructor(deviceKeysTable: IDeviceKeysTable, issuesTable: IIssuesTable, logFactory: LogFactory, logsTable: ILogsTable);
    handleMessage(msg: StorageWriterMessage): Promise<void>;
    private addDeviceKey;
    private addLog;
    private addLogEntry;
    private addIssue;
    protected isQuotaExceededError(err: any): boolean;
    protected processLogsQueue(): Promise<void>;
}
